// // Â© 2017 George King. Permission to use this file is granted in license-quilt.txt.
// This file was generated by legs from ploy.legs.

import Foundation


public enum TokenKind: CustomStringConvertible {
  case acc
  case and
  case angleC
  case angleO
  case ann
  case bind
  case bling
  case braceC
  case braceO
  case brackC
  case brackO
  case call
  case caret
  case case_
  case comment
  case dash
  case flt
  case fn
  case host_type
  case host_val
  case if_
  case in_
  case incomplete
  case int
  case intBin
  case intDec
  case intHex
  case intOct
  case intQuat
  case intersection
  case invalid
  case match
  case method
  case newline
  case or
  case parenC
  case parenO
  case polyfn
  case pub
  case semicolon
  case sig
  case slash
  case spaces
  case stringDQ
  case stringSQ
  case sym
  case tabs
  case tagTest
  case typeAlias
  case union
  case where_

  public var description: String {
    switch self {
    case .acc: return "`@`"
    case .and: return "`and`"
    case .angleC: return "`>`"
    case .angleO: return "`<`"
    case .ann: return "`:`"
    case .bind: return "`=`"
    case .bling: return "`$`"
    case .braceC: return "`}`"
    case .braceO: return "`{`"
    case .brackC: return "`]`"
    case .brackO: return "`[`"
    case .call: return "`.`"
    case .caret: return "`^`"
    case .case_: return "`?`"
    case .comment: return "comment"
    case .dash: return "`-`"
    case .flt: return "flt"
    case .fn: return "`fn`"
    case .host_type: return "`host_type`"
    case .host_val: return "`host_val`"
    case .if_: return "`if`"
    case .in_: return "`in`"
    case .incomplete: return "incomplete"
    case .int: return "int"
    case .intBin: return "intBin"
    case .intDec: return "intDec"
    case .intHex: return "intHex"
    case .intOct: return "intOct"
    case .intQuat: return "intQuat"
    case .intersection: return "`&`"
    case .invalid: return "invalid"
    case .match: return "`match`"
    case .method: return "`method`"
    case .newline: return "newline"
    case .or: return "`or`"
    case .parenC: return "`)`"
    case .parenO: return "`(`"
    case .polyfn: return "`polyfn`"
    case .pub: return "`pub`"
    case .semicolon: return "`;`"
    case .sig: return "`%`"
    case .slash: return "`/`"
    case .spaces: return "spaces"
    case .stringDQ: return "stringDQ"
    case .stringSQ: return "stringSQ"
    case .sym: return "sym"
    case .tabs: return "tabs"
    case .tagTest: return "`@?`"
    case .typeAlias: return "`=:`"
    case .union: return "`|`"
    case .where_: return "`::`"
    }
  }
}


public struct Lexer: Sequence, IteratorProtocol {

  public typealias Element = Token<TokenKind>
  public typealias Iterator = Lexer

  public let source: Source

  private var stack: [(UInt, TokenKind?)] = [(0, nil)]
  private var pos: Int = 0

  public init(source: Source) {
    self.source = source
  }

  public mutating func next() -> Token<TokenKind>? {
    let (modeStart, popKind) = self.stack.last!
    let linePos = (source.newlinePositions.last ?? -1) + 1
    let lineIdx = source.newlinePositions.count
    var pos = self.pos
    var state = modeStart
    var end: Int? = nil
    var kind: TokenKind = .incomplete

    loop: while pos < source.text.count {
      let byte = source.text[pos]

      switch state {

      case 0: // main pre-match.
        switch byte {
        case 0x0...0x8, 0xb...0x1f, 0x21, 0x23, 0x2a...0x2c, 0x5c, 0x60, 0x7e...0xff: state = 1; end = pos+1; kind = .invalid
        case 0x9: state = 2; end = pos+1; kind = .tabs
        case 0xa: state = 3; end = pos+1; kind = .newline
        case 0x20: state = 4; end = pos+1; kind = .spaces
        case 0x22: state = 5
        case 0x24: state = 6; end = pos+1; kind = .bling
        case 0x25: state = 7; end = pos+1; kind = .sig
        case 0x26: state = 8; end = pos+1; kind = .intersection
        case 0x27: state = 9
        case 0x28: state = 10; end = pos+1; kind = .parenO
        case 0x29: state = 11; end = pos+1; kind = .parenC
        case 0x2d: state = 12; end = pos+1; kind = .dash
        case 0x2e: state = 13; end = pos+1; kind = .call
        case 0x2f: state = 14; end = pos+1; kind = .slash
        case 0x30: state = 15; end = pos+1; kind = .int
        case 0x31...0x39: state = 16; end = pos+1; kind = .int
        case 0x3a: state = 17; end = pos+1; kind = .ann
        case 0x3b: state = 18; end = pos+1; kind = .semicolon
        case 0x3c: state = 19; end = pos+1; kind = .angleO
        case 0x3d: state = 20; end = pos+1; kind = .bind
        case 0x3e: state = 21; end = pos+1; kind = .angleC
        case 0x3f: state = 22; end = pos+1; kind = .case_
        case 0x40: state = 23; end = pos+1; kind = .acc
        case 0x41...0x5a, 0x5f, 0x62...0x65, 0x67, 0x6a...0x6c, 0x6e, 0x71...0x7a: state = 24; end = pos+1; kind = .sym
        case 0x5b: state = 25; end = pos+1; kind = .brackO
        case 0x5d: state = 26; end = pos+1; kind = .brackC
        case 0x5e: state = 27; end = pos+1; kind = .caret
        case 0x61: state = 28; end = pos+1; kind = .sym
        case 0x66: state = 29; end = pos+1; kind = .sym
        case 0x68: state = 30; end = pos+1; kind = .sym
        case 0x69: state = 31; end = pos+1; kind = .sym
        case 0x6d: state = 32; end = pos+1; kind = .sym
        case 0x6f: state = 33; end = pos+1; kind = .sym
        case 0x70: state = 34; end = pos+1; kind = .sym
        case 0x7b: state = 35; end = pos+1; kind = .braceO
        case 0x7c: state = 36; end = pos+1; kind = .union
        case 0x7d: state = 37; end = pos+1; kind = .braceC
        default: break loop
        }
      case 1: // invalid.
        switch byte {
        case 0x0...0x8, 0xb...0x1f, 0x21, 0x23, 0x2a...0x2c, 0x5c, 0x60, 0x7e...0xff: state = 1; end = pos+1; kind = .invalid
        default: break loop
        }
      case 2: // tabs.
        switch byte {
        case 0x9: state = 2; end = pos+1; kind = .tabs
        default: break loop
        }
      case 3: // newline.
        break loop
      case 4: // spaces.
        switch byte {
        case 0x20: state = 4; end = pos+1; kind = .spaces
        default: break loop
        }
      case 5: // main pre-match.
        switch byte {
        case 0x20, 0x21, 0x23...0x5b, 0x5d...0x7e: state = 5
        case 0x22: state = 153; end = pos+1; kind = .stringDQ
        case 0x5c: state = 154
        case 0xc2: state = 155
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 156
        case 0xcd: state = 157
        case 0xce: state = 158
        case 0xd4: state = 159
        case 0xd5: state = 160
        case 0xd6: state = 161
        case 0xd7: state = 162
        case 0xd8: state = 163
        case 0xdb: state = 164
        case 0xdc: state = 165
        case 0xdd: state = 166
        case 0xde: state = 167
        case 0xdf: state = 168
        case 0xe0: state = 169
        case 0xe1: state = 170
        case 0xe2: state = 171
        case 0xe3: state = 172
        case 0xe4: state = 173
        case 0xe5...0xe8, 0xeb, 0xec: state = 174
        case 0xe9: state = 175
        case 0xea: state = 176
        case 0xed: state = 177
        case 0xef: state = 178
        case 0xf0: state = 179
        case 0xf3: state = 180
        default: break loop
        }
      case 6: // bling.
        break loop
      case 7: // sig.
        break loop
      case 8: // intersection.
        break loop
      case 9: // main pre-match.
        switch byte {
        case 0x20...0x26, 0x28...0x5b, 0x5d...0x7e: state = 9
        case 0x27: state = 274; end = pos+1; kind = .stringSQ
        case 0x5c: state = 275
        case 0xc2...0xdf: state = 276
        case 0xe0: state = 277
        case 0xe1: state = 278
        case 0xe2...0xec: state = 279
        case 0xed: state = 280
        case 0xef: state = 281
        case 0xf0: state = 282
        case 0xf3: state = 283
        default: break loop
        }
      case 10: // parenO.
        break loop
      case 11: // parenC.
        break loop
      case 12: // dash.
        switch byte {
        case 0x30: state = 15; end = pos+1; kind = .int
        case 0x31...0x39: state = 16; end = pos+1; kind = .int
        default: break loop
        }
      case 13: // call.
        break loop
      case 14: // slash.
        switch byte {
        case 0x2f: state = 42; end = pos+1; kind = .comment
        default: break loop
        }
      case 15: // int.
        switch byte {
        case 0x2e: state = 96; end = pos+1; kind = .flt
        case 0x30...0x39: state = 16; end = pos+1; kind = .int
        case 0x5f: state = 97
        case 0x62: state = 98
        case 0x64: state = 99
        case 0x6f: state = 100
        case 0x71: state = 101
        case 0x78: state = 102
        default: break loop
        }
      case 16: // int.
        switch byte {
        case 0x2e: state = 96; end = pos+1; kind = .flt
        case 0x30...0x39: state = 16; end = pos+1; kind = .int
        case 0x5f: state = 97
        default: break loop
        }
      case 17: // ann.
        switch byte {
        case 0x3a: state = 431; end = pos+1; kind = .where_
        default: break loop
        }
      case 18: // semicolon.
        break loop
      case 19: // angleO.
        break loop
      case 20: // bind.
        switch byte {
        case 0x3a: state = 486; end = pos+1; kind = .typeAlias
        default: break loop
        }
      case 21: // angleC.
        break loop
      case 22: // case.
        break loop
      case 23: // acc.
        switch byte {
        case 0x3f: state = 41; end = pos+1; kind = .tagTest
        default: break loop
        }
      case 24: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 25: // brackO.
        break loop
      case 26: // brackC.
        break loop
      case 27: // caret.
        break loop
      case 28: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6e: state = 44; end = pos+1; kind = .sym
        default: break loop
        }
      case 29: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6e: state = 105; end = pos+1; kind = .fn
        default: break loop
        }
      case 30: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6f: state = 43; end = pos+1; kind = .sym
        default: break loop
        }
      case 31: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x65, 0x67...0x6d, 0x6f...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x66: state = 94; end = pos+1; kind = .if_
        case 0x6e: state = 95; end = pos+1; kind = .in_
        default: break loop
        }
      case 32: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x62...0x64, 0x66...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x61: state = 39; end = pos+1; kind = .sym
        case 0x65: state = 40; end = pos+1; kind = .sym
        default: break loop
        }
      case 33: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x71, 0x73...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x72: state = 111; end = pos+1; kind = .or
        default: break loop
        }
      case 34: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x74, 0x76...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6f: state = 103; end = pos+1; kind = .sym
        case 0x75: state = 104; end = pos+1; kind = .sym
        default: break loop
        }
      case 35: // braceO.
        break loop
      case 36: // union.
        break loop
      case 37: // braceC.
        break loop
      case 38: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 39: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x74: state = 491; end = pos+1; kind = .sym
        default: break loop
        }
      case 40: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x74: state = 150; end = pos+1; kind = .sym
        default: break loop
        }
      case 41: // tagTest.
        break loop
      case 42: // comment.
        switch byte {
        case 0x20...0x7e: state = 45; end = pos+1; kind = .comment
        case 0xc2: state = 46
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 47
        case 0xcd: state = 48
        case 0xce: state = 49
        case 0xd4: state = 50
        case 0xd5: state = 51
        case 0xd6: state = 52
        case 0xd7: state = 53
        case 0xd8: state = 54
        case 0xdb: state = 55
        case 0xdc: state = 56
        case 0xdd: state = 57
        case 0xde: state = 58
        case 0xdf: state = 59
        case 0xe0: state = 60
        case 0xe1: state = 61
        case 0xe2: state = 62
        case 0xe3: state = 63
        case 0xe4: state = 64
        case 0xe5...0xe8, 0xeb, 0xec: state = 65
        case 0xe9: state = 66
        case 0xea: state = 67
        case 0xed: state = 68
        case 0xef: state = 69
        case 0xf0: state = 70
        case 0xf3: state = 71
        default: break loop
        }
      case 43: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x72, 0x74...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x73: state = 430; end = pos+1; kind = .sym
        default: break loop
        }
      case 44: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x63, 0x65...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x64: state = 152; end = pos+1; kind = .and
        default: break loop
        }
      case 45: // comment.
        switch byte {
        case 0x20...0x7e: state = 45; end = pos+1; kind = .comment
        case 0xc2: state = 46
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 47
        case 0xcd: state = 48
        case 0xce: state = 49
        case 0xd4: state = 50
        case 0xd5: state = 51
        case 0xd6: state = 52
        case 0xd7: state = 53
        case 0xd8: state = 54
        case 0xdb: state = 55
        case 0xdc: state = 56
        case 0xdd: state = 57
        case 0xde: state = 58
        case 0xdf: state = 59
        case 0xe0: state = 60
        case 0xe1: state = 61
        case 0xe2: state = 62
        case 0xe3: state = 63
        case 0xe4: state = 64
        case 0xe5...0xe8, 0xeb, 0xec: state = 65
        case 0xe9: state = 66
        case 0xea: state = 67
        case 0xed: state = 68
        case 0xef: state = 69
        case 0xf0: state = 70
        case 0xf3: state = 71
        default: break loop
        }
      case 46: // main post-match.
        switch byte {
        case 0xa0...0xac, 0xae...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 47: // main post-match.
        switch byte {
        case 0x80...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 48: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xba...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 49: // main post-match.
        switch byte {
        case 0x84...0x8a, 0x8c, 0x8e...0xa1, 0xa3...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 50: // main post-match.
        switch byte {
        case 0x80...0xaf, 0xb1...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 51: // main post-match.
        switch byte {
        case 0x80...0x96, 0x99...0x9f, 0xa1...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 52: // main post-match.
        switch byte {
        case 0x80...0x87, 0x89, 0x8a, 0x8d...0x8f, 0x91...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 53: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xaa, 0xb0...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 54: // main post-match.
        switch byte {
        case 0x86...0x9b, 0x9e...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 55: // main post-match.
        switch byte {
        case 0x80...0x9c, 0x9e...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 56: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 57: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 58: // main post-match.
        switch byte {
        case 0x80...0xb1: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 59: // main post-match.
        switch byte {
        case 0x80...0xba: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 60: // main post-match.
        switch byte {
        case 0xa0: state = 215
        case 0xa1: state = 216
        case 0xa2: state = 217
        case 0xa3: state = 218
        case 0xa4, 0xa5, 0xbc: state = 47
        case 0xa6: state = 219
        case 0xa7: state = 220
        case 0xa8: state = 221
        case 0xa9: state = 222
        case 0xaa: state = 223
        case 0xab: state = 224
        case 0xac: state = 225
        case 0xad: state = 226
        case 0xae: state = 227
        case 0xaf: state = 228
        case 0xb0: state = 229
        case 0xb1: state = 230
        case 0xb2: state = 231
        case 0xb3: state = 232
        case 0xb4: state = 233
        case 0xb5: state = 234
        case 0xb6: state = 235
        case 0xb7: state = 236
        case 0xb8: state = 237
        case 0xb9: state = 238
        case 0xba: state = 239
        case 0xbb: state = 240
        case 0xbd: state = 241
        case 0xbe: state = 242
        case 0xbf: state = 243
        default: break loop
        }
      case 61: // main post-match.
        switch byte {
        case 0x80...0x82, 0x84...0x88, 0x90...0x99, 0x9e, 0xac, 0xae, 0xb4...0xb6, 0xb8...0xbb: state = 47
        case 0x83: state = 114
        case 0x89: state = 115
        case 0x8a: state = 116
        case 0x8b: state = 117
        case 0x8c: state = 118
        case 0x8d: state = 119
        case 0x8e: state = 120
        case 0x8f: state = 121
        case 0x9a: state = 122
        case 0x9b: state = 123
        case 0x9c: state = 124
        case 0x9d: state = 125
        case 0x9f: state = 126
        case 0xa0: state = 127
        case 0xa1: state = 128
        case 0xa2: state = 129
        case 0xa3: state = 130
        case 0xa4: state = 131
        case 0xa5: state = 132
        case 0xa6: state = 133
        case 0xa7: state = 134
        case 0xa8: state = 135
        case 0xa9: state = 136
        case 0xaa: state = 137
        case 0xad: state = 138
        case 0xaf: state = 139
        case 0xb0: state = 140
        case 0xb1: state = 141
        case 0xb2: state = 142
        case 0xb3: state = 143
        case 0xb7: state = 144
        case 0xbc: state = 145
        case 0xbd: state = 146
        case 0xbe: state = 147
        case 0xbf: state = 148
        default: break loop
        }
      case 62: // main post-match.
        switch byte {
        case 0x80: state = 72
        case 0x81: state = 73
        case 0x82: state = 74
        case 0x83: state = 75
        case 0x84, 0x85, 0x87...0x8e, 0x92...0xac, 0xb2, 0xb8, 0xbc...0xbe: state = 47
        case 0x86: state = 76
        case 0x8f: state = 77
        case 0x90: state = 78
        case 0x91: state = 79
        case 0xad: state = 80
        case 0xae: state = 81
        case 0xaf: state = 82
        case 0xb0: state = 83
        case 0xb1: state = 84
        case 0xb3: state = 85
        case 0xb4: state = 86
        case 0xb5: state = 87
        case 0xb6: state = 88
        case 0xb7: state = 89
        case 0xb9: state = 90
        case 0xba: state = 91
        case 0xbb: state = 92
        case 0xbf: state = 93
        default: break loop
        }
      case 63: // main post-match.
        switch byte {
        case 0x80, 0x83, 0x85, 0x89, 0x8a, 0x8c...0xbf: state = 47
        case 0x81: state = 106
        case 0x82: state = 107
        case 0x84: state = 108
        case 0x86: state = 109
        case 0x87: state = 110
        case 0x88: state = 84
        case 0x8b: state = 77
        default: break loop
        }
      case 64: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb7...0xbf: state = 47
        case 0xb6: state = 130
        default: break loop
        }
      case 65: // main post-match.
        switch byte {
        case 0x80...0xbf: state = 47
        default: break loop
        }
      case 66: // main post-match.
        switch byte {
        case 0x80...0xbe: state = 47
        case 0xbf: state = 214
        default: break loop
        }
      case 67: // main post-match.
        switch byte {
        case 0x80...0x91, 0x94...0x97, 0x99, 0x9a, 0x9c, 0x9d, 0xa2, 0xa4, 0xa6, 0xaa, 0xae, 0xb0...0xbf: state = 47
        case 0x92: state = 181
        case 0x93: state = 182
        case 0x98: state = 183
        case 0x9b, 0xa1: state = 128
        case 0x9e: state = 184
        case 0x9f: state = 185
        case 0xa0: state = 186
        case 0xa3: state = 187
        case 0xa5: state = 188
        case 0xa7: state = 189
        case 0xa8: state = 190
        case 0xa9: state = 191
        case 0xab: state = 192
        case 0xac: state = 193
        case 0xad: state = 194
        case 0xaf: state = 195
        default: break loop
        }
      case 68: // main post-match.
        switch byte {
        case 0x80...0x9d: state = 47
        case 0x9e: state = 110
        case 0x9f: state = 151
        default: break loop
        }
      case 69: // main post-match.
        switch byte {
        case 0xa4...0xa8, 0xaa, 0xae, 0xb0...0xb4, 0xba, 0xbd: state = 47
        case 0xa9: state = 333
        case 0xab: state = 334
        case 0xac: state = 335
        case 0xad: state = 336
        case 0xaf: state = 337
        case 0xb5: state = 338
        case 0xb6: state = 339
        case 0xb7: state = 340
        case 0xb8: state = 120
        case 0xb9: state = 341
        case 0xbb: state = 342
        case 0xbc: state = 106
        case 0xbe: state = 77
        case 0xbf: state = 343
        default: break loop
        }
      case 70: // main post-match.
        switch byte {
        case 0x90: state = 492
        case 0x91: state = 493
        case 0x92: state = 494
        case 0x93: state = 495
        case 0x94: state = 496
        case 0x96: state = 497
        case 0x97, 0xa0...0xa9: state = 65
        case 0x98: state = 498
        case 0x9b: state = 499
        case 0x9d: state = 500
        case 0x9e: state = 501
        case 0x9f: state = 502
        case 0xaa: state = 503
        case 0xab: state = 504
        case 0xac: state = 505
        case 0xaf: state = 506
        default: break loop
        }
      case 71: // main post-match.
        switch byte {
        case 0xa0: state = 485
        default: break loop
        }
      case 72: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xa9, 0xaf...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 73: // main post-match.
        switch byte {
        case 0x80...0x9f, 0xb0, 0xb1, 0xb4...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 74: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9c, 0xa0...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 75: // main post-match.
        switch byte {
        case 0x90...0xb0: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 76: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 77: // main post-match.
        switch byte {
        case 0x80...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 78: // main post-match.
        switch byte {
        case 0x80...0xa6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 79: // main post-match.
        switch byte {
        case 0x80...0x8a, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 80: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xb6...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 81: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb9, 0xbd...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 82: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x91, 0xac...0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 83: // main post-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 84: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 85: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xb9...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 86: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xa7, 0xad, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 87: // main post-match.
        switch byte {
        case 0x80...0xa7, 0xaf, 0xb0, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 88: // main post-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xb6, 0xb8...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 89: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88...0x8e, 0x90...0x96, 0x98...0x9e, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 90: // main post-match.
        switch byte {
        case 0x80...0x84: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 91: // main post-match.
        switch byte {
        case 0x80...0x99, 0x9b...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 92: // main post-match.
        switch byte {
        case 0x80...0xb3: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 93: // main post-match.
        switch byte {
        case 0x80...0x95, 0xb0...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 94: // if.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 95: // in.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 96: // flt.
        switch byte {
        case 0x30...0x39: state = 453; end = pos+1; kind = .flt
        default: break loop
        }
      case 97: // main post-match.
        switch byte {
        case 0x30...0x39: state = 273; end = pos+1; kind = .int
        default: break loop
        }
      case 98: // main post-match.
        switch byte {
        case 0x30, 0x31: state = 469; end = pos+1; kind = .intBin
        default: break loop
        }
      case 99: // main post-match.
        switch byte {
        case 0x30...0x39: state = 466; end = pos+1; kind = .intDec
        default: break loop
        }
      case 100: // main post-match.
        switch byte {
        case 0x30...0x37: state = 113; end = pos+1; kind = .intOct
        default: break loop
        }
      case 101: // main post-match.
        switch byte {
        case 0x30...0x33: state = 576; end = pos+1; kind = .intQuat
        default: break loop
        }
      case 102: // main post-match.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 452; end = pos+1; kind = .intHex
        default: break loop
        }
      case 103: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6b, 0x6d...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6c: state = 112; end = pos+1; kind = .sym
        default: break loop
        }
      case 104: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61, 0x63...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x62: state = 428; end = pos+1; kind = .pub
        default: break loop
        }
      case 105: // fn.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 106: // main post-match.
        switch byte {
        case 0x81...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 107: // main post-match.
        switch byte {
        case 0x80...0x96, 0x99...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 108: // main post-match.
        switch byte {
        case 0x85...0xad, 0xb1...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 109: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0xba: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 110: // main post-match.
        switch byte {
        case 0x80...0xa3, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 111: // or.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 112: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x78, 0x7a: state = 38; end = pos+1; kind = .sym
        case 0x79: state = 197; end = pos+1; kind = .sym
        default: break loop
        }
      case 113: // intOct.
        switch byte {
        case 0x30...0x37: state = 113; end = pos+1; kind = .intOct
        case 0x5f: state = 149
        default: break loop
        }
      case 114: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87, 0x8d, 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 115: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x96, 0x98, 0x9a...0x9d, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 116: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0xb0, 0xb2...0xb5, 0xb8...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 117: // main post-match.
        switch byte {
        case 0x80, 0x82...0x85, 0x88...0x96, 0x98...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 118: // main post-match.
        switch byte {
        case 0x80...0x90, 0x92...0x95, 0x98...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 119: // main post-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xbc: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 120: // main post-match.
        switch byte {
        case 0x80...0x99, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 121: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 122: // main post-match.
        switch byte {
        case 0x80...0x9c, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 123: // main post-match.
        switch byte {
        case 0x80...0xb8: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 124: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x94, 0xa0...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 125: // main post-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xac, 0xae...0xb0, 0xb2, 0xb3: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 126: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 127: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 128: // main post-match.
        switch byte {
        case 0x80...0xb7: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 129: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 130: // main post-match.
        switch byte {
        case 0x80...0xb5: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 131: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xab, 0xb0...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 132: // main post-match.
        switch byte {
        case 0x80, 0x84...0xad, 0xb0...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 133: // main post-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 134: // main post-match.
        switch byte {
        case 0x80...0x89, 0x90...0x9a, 0x9e...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 135: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9e...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 136: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbc, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 137: // main post-match.
        switch byte {
        case 0x80...0x89, 0x90...0x99, 0xa0...0xad, 0xb0...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 138: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbc: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 139: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 140: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xbb...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 141: // main post-match.
        switch byte {
        case 0x80...0x89, 0x8d...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 142: // main post-match.
        switch byte {
        case 0x80...0x88: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 143: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xb6, 0xb8, 0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 144: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xbb...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 145: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0x9d, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 146: // main post-match.
        switch byte {
        case 0x80...0x85, 0x88...0x8d, 0x90...0x97, 0x99, 0x9b, 0x9d, 0x9f...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 147: // main post-match.
        switch byte {
        case 0x80...0xb4, 0xb6...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 148: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x93, 0x96...0x9b, 0x9d...0xaf, 0xb2...0xb4, 0xb6...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 149: // main post-match.
        switch byte {
        case 0x30...0x37: state = 298; end = pos+1; kind = .intOct
        default: break loop
        }
      case 150: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x67, 0x69...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x68: state = 198; end = pos+1; kind = .sym
        default: break loop
        }
      case 151: // main post-match.
        switch byte {
        case 0x80...0x86, 0x8b...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 152: // and.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 153: // stringDQ.
        break loop
      case 154: // main pre-match.
        switch byte {
        case 0x20...0x7e: state = 5
        case 0xc2: state = 155
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 156
        case 0xcd: state = 157
        case 0xce: state = 158
        case 0xd4: state = 159
        case 0xd5: state = 160
        case 0xd6: state = 161
        case 0xd7: state = 162
        case 0xd8: state = 163
        case 0xdb: state = 164
        case 0xdc: state = 165
        case 0xdd: state = 166
        case 0xde: state = 167
        case 0xdf: state = 168
        case 0xe0: state = 169
        case 0xe1: state = 170
        case 0xe2: state = 171
        case 0xe3: state = 172
        case 0xe4: state = 173
        case 0xe5...0xe8, 0xeb, 0xec: state = 174
        case 0xe9: state = 175
        case 0xea: state = 176
        case 0xed: state = 177
        case 0xef: state = 178
        case 0xf0: state = 179
        case 0xf3: state = 180
        default: break loop
        }
      case 155: // main pre-match.
        switch byte {
        case 0xa0...0xac, 0xae...0xbf: state = 5
        default: break loop
        }
      case 156: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 5
        default: break loop
        }
      case 157: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xba...0xbf: state = 5
        default: break loop
        }
      case 158: // main pre-match.
        switch byte {
        case 0x84...0x8a, 0x8c, 0x8e...0xa1, 0xa3...0xbf: state = 5
        default: break loop
        }
      case 159: // main pre-match.
        switch byte {
        case 0x80...0xaf, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 160: // main pre-match.
        switch byte {
        case 0x80...0x96, 0x99...0x9f, 0xa1...0xbf: state = 5
        default: break loop
        }
      case 161: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x89, 0x8a, 0x8d...0x8f, 0x91...0xbf: state = 5
        default: break loop
        }
      case 162: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xaa, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 163: // main pre-match.
        switch byte {
        case 0x86...0x9b, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 164: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 165: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0xbf: state = 5
        default: break loop
        }
      case 166: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0xbf: state = 5
        default: break loop
        }
      case 167: // main pre-match.
        switch byte {
        case 0x80...0xb1: state = 5
        default: break loop
        }
      case 168: // main pre-match.
        switch byte {
        case 0x80...0xba: state = 5
        default: break loop
        }
      case 169: // main pre-match.
        switch byte {
        case 0xa0: state = 244
        case 0xa1: state = 245
        case 0xa2: state = 246
        case 0xa3: state = 247
        case 0xa4, 0xa5, 0xbc: state = 156
        case 0xa6: state = 248
        case 0xa7: state = 249
        case 0xa8: state = 250
        case 0xa9: state = 251
        case 0xaa: state = 252
        case 0xab: state = 253
        case 0xac: state = 254
        case 0xad: state = 255
        case 0xae: state = 256
        case 0xaf: state = 257
        case 0xb0: state = 258
        case 0xb1: state = 259
        case 0xb2: state = 260
        case 0xb3: state = 261
        case 0xb4: state = 262
        case 0xb5: state = 263
        case 0xb6: state = 264
        case 0xb7: state = 265
        case 0xb8: state = 266
        case 0xb9: state = 267
        case 0xba: state = 268
        case 0xbb: state = 269
        case 0xbd: state = 270
        case 0xbe: state = 271
        case 0xbf: state = 272
        default: break loop
        }
      case 170: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x84...0x88, 0x90...0x99, 0x9e, 0xac, 0xae, 0xb4...0xb6, 0xb8...0xbb: state = 156
        case 0x83: state = 383
        case 0x89: state = 384
        case 0x8a: state = 385
        case 0x8b: state = 386
        case 0x8c: state = 387
        case 0x8d: state = 388
        case 0x8e: state = 292
        case 0x8f: state = 389
        case 0x9a: state = 304
        case 0x9b: state = 379
        case 0x9c: state = 390
        case 0x9d: state = 391
        case 0x9f: state = 392
        case 0xa0: state = 393
        case 0xa1: state = 374
        case 0xa2: state = 394
        case 0xa3: state = 344
        case 0xa4: state = 395
        case 0xa5: state = 396
        case 0xa6: state = 397
        case 0xa7: state = 398
        case 0xa8: state = 399
        case 0xa9: state = 400
        case 0xaa: state = 401
        case 0xad: state = 402
        case 0xaf: state = 403
        case 0xb0: state = 404
        case 0xb1: state = 405
        case 0xb2: state = 329
        case 0xb3: state = 406
        case 0xb7: state = 407
        case 0xbc: state = 408
        case 0xbd: state = 409
        case 0xbe: state = 362
        case 0xbf: state = 410
        default: break loop
        }
      case 171: // main pre-match.
        switch byte {
        case 0x80: state = 432
        case 0x81: state = 433
        case 0x82: state = 434
        case 0x83: state = 435
        case 0x84, 0x85, 0x87...0x8e, 0x92...0xac, 0xb2, 0xb8, 0xbc...0xbe: state = 156
        case 0x86: state = 421
        case 0x8f: state = 296
        case 0x90: state = 436
        case 0x91: state = 437
        case 0xad: state = 438
        case 0xae: state = 439
        case 0xaf: state = 440
        case 0xb0: state = 441
        case 0xb1: state = 442
        case 0xb3: state = 443
        case 0xb4: state = 444
        case 0xb5: state = 445
        case 0xb6: state = 446
        case 0xb7: state = 447
        case 0xb9: state = 448
        case 0xba: state = 449
        case 0xbb: state = 419
        case 0xbf: state = 450
        default: break loop
        }
      case 172: // main pre-match.
        switch byte {
        case 0x80, 0x83, 0x85, 0x89, 0x8a, 0x8c...0xbf: state = 156
        case 0x81: state = 295
        case 0x82: state = 616
        case 0x84: state = 617
        case 0x86: state = 618
        case 0x87: state = 306
        case 0x88: state = 442
        case 0x8b: state = 296
        default: break loop
        }
      case 173: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb7...0xbf: state = 156
        case 0xb6: state = 344
        default: break loop
        }
      case 174: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 156
        default: break loop
        }
      case 175: // main pre-match.
        switch byte {
        case 0x80...0xbe: state = 156
        case 0xbf: state = 196
        default: break loop
        }
      case 176: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x94...0x97, 0x99, 0x9a, 0x9c, 0x9d, 0xa2, 0xa4, 0xa6, 0xaa, 0xae, 0xb0...0xbf: state = 156
        case 0x92: state = 471
        case 0x93: state = 472
        case 0x98: state = 473
        case 0x9b, 0xa1: state = 374
        case 0x9e: state = 474
        case 0x9f: state = 475
        case 0xa0: state = 476
        case 0xa3: state = 477
        case 0xa5: state = 478
        case 0xa7: state = 479
        case 0xa8: state = 314
        case 0xa9: state = 480
        case 0xab: state = 481
        case 0xac: state = 482
        case 0xad: state = 483
        case 0xaf: state = 484
        default: break loop
        }
      case 177: // main pre-match.
        switch byte {
        case 0x80...0x9d: state = 156
        case 0x9e: state = 306
        case 0x9f: state = 528
        default: break loop
        }
      case 178: // main pre-match.
        switch byte {
        case 0xa4...0xa8, 0xaa, 0xae, 0xb0...0xb4, 0xba, 0xbd: state = 156
        case 0xa9: state = 284
        case 0xab: state = 285
        case 0xac: state = 286
        case 0xad: state = 287
        case 0xaf: state = 288
        case 0xb5: state = 289
        case 0xb6: state = 290
        case 0xb7: state = 291
        case 0xb8: state = 292
        case 0xb9: state = 293
        case 0xbb: state = 294
        case 0xbc: state = 295
        case 0xbe: state = 296
        case 0xbf: state = 297
        default: break loop
        }
      case 179: // main pre-match.
        switch byte {
        case 0x90: state = 199
        case 0x91: state = 200
        case 0x92: state = 201
        case 0x93: state = 202
        case 0x94: state = 203
        case 0x96: state = 204
        case 0x97, 0xa0...0xa9: state = 174
        case 0x98: state = 205
        case 0x9b: state = 206
        case 0x9d: state = 207
        case 0x9e: state = 208
        case 0x9f: state = 209
        case 0xaa: state = 210
        case 0xab: state = 211
        case 0xac: state = 212
        case 0xaf: state = 213
        default: break loop
        }
      case 180: // main pre-match.
        switch byte {
        case 0xa0: state = 451
        default: break loop
        }
      case 181: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 182: // main post-match.
        switch byte {
        case 0x80...0x86, 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 183: // main post-match.
        switch byte {
        case 0x80...0xab: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 184: // main post-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb7: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 185: // main post-match.
        switch byte {
        case 0xb7...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 186: // main post-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 187: // main post-match.
        switch byte {
        case 0x80...0x85, 0x8e...0x99, 0xa0...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 188: // main post-match.
        switch byte {
        case 0x80...0x93, 0x9f...0xbc: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 189: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x8f...0x99, 0x9e...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 190: // main post-match.
        switch byte {
        case 0x80...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 191: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0x9c...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 192: // main post-match.
        switch byte {
        case 0x80...0x82, 0x9b...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 193: // main post-match.
        switch byte {
        case 0x81...0x86, 0x89...0x8e, 0x91...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 194: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 195: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 196: // main pre-match.
        switch byte {
        case 0x80...0x95: state = 5
        default: break loop
        }
      case 197: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x65, 0x67...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x66: state = 470; end = pos+1; kind = .sym
        default: break loop
        }
      case 198: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6f: state = 429; end = pos+1; kind = .sym
        default: break loop
        }
      case 199: // main pre-match.
        switch byte {
        case 0x80: state = 299
        case 0x81: state = 300
        case 0x82, 0x85, 0x90, 0x91, 0x98...0x9b, 0xb0: state = 156
        case 0x83: state = 168
        case 0x84: state = 301
        case 0x86: state = 302
        case 0x87: state = 303
        case 0x8a: state = 304
        case 0x8b: state = 305
        case 0x8c: state = 306
        case 0x8d: state = 307
        case 0x8e: state = 308
        case 0x8f: state = 309
        case 0x92: state = 310
        case 0x93: state = 311
        case 0x94: state = 312
        case 0x95: state = 313
        case 0x9c: state = 314
        case 0x9d: state = 315
        case 0xa0: state = 316
        case 0xa1: state = 317
        case 0xa2: state = 318
        case 0xa3: state = 319
        case 0xa4: state = 320
        case 0xa6: state = 321
        case 0xa7: state = 290
        case 0xa8: state = 322
        case 0xa9: state = 323
        case 0xaa: state = 324
        case 0xab: state = 325
        case 0xac: state = 326
        case 0xad: state = 327
        case 0xae: state = 328
        case 0xb1: state = 329
        case 0xb2: state = 330
        case 0xb3: state = 331
        case 0xb9: state = 332
        default: break loop
        }
      case 200: // main pre-match.
        switch byte {
        case 0x80, 0x86, 0x90, 0x92, 0x98: state = 156
        case 0x81: state = 359
        case 0x82: state = 360
        case 0x83: state = 361
        case 0x84: state = 362
        case 0x85: state = 363
        case 0x87: state = 364
        case 0x88: state = 365
        case 0x8a: state = 366
        case 0x8b: state = 367
        case 0x8c: state = 368
        case 0x8d: state = 369
        case 0x91: state = 370
        case 0x93: state = 371
        case 0x96: state = 372
        case 0x97: state = 358
        case 0x99: state = 373
        case 0x9a: state = 374
        case 0x9b: state = 375
        case 0x9c: state = 376
        case 0xa2: state = 377
        case 0xa3: state = 378
        case 0xab: state = 379
        case 0xb0: state = 380
        case 0xb1: state = 381
        case 0xb2: state = 382
        default: break loop
        }
      case 201: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90, 0x92...0x94: state = 156
        case 0x8e: state = 285
        case 0x91: state = 467
        case 0x95: state = 468
        default: break loop
        }
      case 202: // main pre-match.
        switch byte {
        case 0x80...0x8f: state = 156
        case 0x90: state = 454
        default: break loop
        }
      case 203: // main pre-match.
        switch byte {
        case 0x90...0x98: state = 156
        case 0x99: state = 507
        default: break loop
        }
      case 204: // main pre-match.
        switch byte {
        case 0xa0...0xa7, 0xac, 0xbc: state = 156
        case 0xa8: state = 379
        case 0xa9: state = 455
        case 0xab: state = 456
        case 0xad: state = 457
        case 0xae: state = 458
        case 0xbd: state = 459
        case 0xbe: state = 460
        case 0xbf: state = 461
        default: break loop
        }
      case 205: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xaa: state = 156
        case 0x9f: state = 414
        case 0xab: state = 330
        default: break loop
        }
      case 206: // main pre-match.
        switch byte {
        case 0x80: state = 488
        case 0xb0: state = 156
        case 0xb1: state = 489
        case 0xb2: state = 490
        default: break loop
        }
      case 207: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x86, 0x88, 0x8c, 0x90, 0x96...0x99, 0x9b...0x9e, 0xa0...0xa9: state = 156
        case 0x83: state = 344
        case 0x84: state = 345
        case 0x85: state = 346
        case 0x87: state = 347
        case 0x89: state = 348
        case 0x8d: state = 349
        case 0x91: state = 350
        case 0x92: state = 351
        case 0x93: state = 352
        case 0x94: state = 353
        case 0x95: state = 354
        case 0x9a: state = 355
        case 0x9f: state = 356
        case 0xaa: state = 357
        default: break loop
        }
      case 208: // main pre-match.
        switch byte {
        case 0x80: state = 578
        case 0xa0...0xa2, 0xa4: state = 156
        case 0xa3: state = 579
        case 0xa5: state = 580
        case 0xb8: state = 581
        case 0xb9: state = 582
        case 0xba: state = 583
        case 0xbb: state = 584
        default: break loop
        }
      case 209: // main pre-match.
        switch byte {
        case 0x80, 0x85: state = 397
        case 0x81, 0x8c...0x9a, 0x9c, 0x9e: state = 156
        case 0x82: state = 411
        case 0x83: state = 412
        case 0x84: state = 413
        case 0x86: state = 414
        case 0x87: state = 415
        case 0x88: state = 416
        case 0x89: state = 417
        case 0x9b: state = 418
        case 0x9d: state = 419
        case 0x9f: state = 420
        case 0xa0: state = 421
        case 0xa1: state = 422
        case 0xa2: state = 423
        case 0xa4: state = 424
        case 0xa5: state = 425
        case 0xa6: state = 426
        case 0xa7: state = 427
        default: break loop
        }
      case 210: // main pre-match.
        switch byte {
        case 0x80...0x9a, 0x9c...0xbf: state = 156
        case 0x9b: state = 487
        default: break loop
        }
      case 211: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9d...0x9f, 0xa1...0xbf: state = 156
        case 0x9c: state = 463
        case 0xa0: state = 464
        default: break loop
        }
      case 212: // main pre-match.
        switch byte {
        case 0x80...0xb9: state = 156
        case 0xba: state = 462
        default: break loop
        }
      case 213: // main pre-match.
        switch byte {
        case 0xa0...0xa7: state = 156
        case 0xa8: state = 358
        default: break loop
        }
      case 214: // main post-match.
        switch byte {
        case 0x80...0x95: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 215: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 216: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9e: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 217: // main post-match.
        switch byte {
        case 0xa0...0xb4, 0xb6...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 218: // main post-match.
        switch byte {
        case 0x94...0xa1, 0xa3...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 219: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb6...0xb9, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 220: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8e, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 221: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8a, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5, 0xb6, 0xb8, 0xb9, 0xbc, 0xbe, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 222: // main post-match.
        switch byte {
        case 0x80...0x82, 0x87, 0x88, 0x8b...0x8d, 0x91, 0x99...0x9c, 0x9e, 0xa6...0xb5: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 223: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8d, 0x8f...0x91, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 224: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87...0x89, 0x8b...0x8d, 0x90, 0xa0...0xa3, 0xa6...0xb1, 0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 225: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 226: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x96, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xb7: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 227: // main post-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x8a, 0x8e...0x90, 0x92...0x95, 0x99, 0x9a, 0x9c, 0x9e, 0x9f, 0xa3, 0xa4, 0xa8...0xaa, 0xae...0xb9, 0xbe, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 228: // main post-match.
        switch byte {
        case 0x80...0x82, 0x86...0x88, 0x8a...0x8d, 0x90, 0x97, 0xa6...0xba: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 229: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb9, 0xbd...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 230: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x98...0x9a, 0xa0...0xa3, 0xa6...0xaf, 0xb8...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 231: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 232: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x9e, 0xa0...0xa3, 0xa6...0xaf, 0xb1, 0xb2: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 233: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xba, 0xbd...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 234: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8f, 0x94...0xa3, 0xa6...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 235: // main post-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x96, 0x9a...0xb1, 0xb3...0xbb, 0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 236: // main post-match.
        switch byte {
        case 0x80...0x86, 0x8a, 0x8f...0x94, 0x96, 0x98...0x9f, 0xa6...0xaf, 0xb2...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 237: // main post-match.
        switch byte {
        case 0x81...0xba, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 238: // main post-match.
        switch byte {
        case 0x80...0x9b: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 239: // main post-match.
        switch byte {
        case 0x81, 0x82, 0x84, 0x87, 0x88, 0x8a, 0x8d, 0x94...0x97, 0x99...0x9f, 0xa1...0xa3, 0xa5, 0xa7, 0xaa, 0xab, 0xad...0xb9, 0xbb...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 240: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x88...0x8d, 0x90...0x99, 0x9c...0x9f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 241: // main post-match.
        switch byte {
        case 0x80...0x87, 0x89...0xac, 0xb1...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 242: // main post-match.
        switch byte {
        case 0x80...0x97, 0x99...0xbc, 0xbe, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 243: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x9a: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 244: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbe: state = 5
        default: break loop
        }
      case 245: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9e: state = 5
        default: break loop
        }
      case 246: // main pre-match.
        switch byte {
        case 0xa0...0xb4, 0xb6...0xbd: state = 5
        default: break loop
        }
      case 247: // main pre-match.
        switch byte {
        case 0x94...0xa1, 0xa3...0xbf: state = 5
        default: break loop
        }
      case 248: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb6...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 249: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8e, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xbb: state = 5
        default: break loop
        }
      case 250: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8a, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5, 0xb6, 0xb8, 0xb9, 0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 251: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x87, 0x88, 0x8b...0x8d, 0x91, 0x99...0x9c, 0x9e, 0xa6...0xb5: state = 5
        default: break loop
        }
      case 252: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8d, 0x8f...0x91, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 253: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87...0x89, 0x8b...0x8d, 0x90, 0xa0...0xa3, 0xa6...0xb1, 0xb9: state = 5
        default: break loop
        }
      case 254: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 255: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x96, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xb7: state = 5
        default: break loop
        }
      case 256: // main pre-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x8a, 0x8e...0x90, 0x92...0x95, 0x99, 0x9a, 0x9c, 0x9e, 0x9f, 0xa3, 0xa4, 0xa8...0xaa, 0xae...0xb9, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 257: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x86...0x88, 0x8a...0x8d, 0x90, 0x97, 0xa6...0xba: state = 5
        default: break loop
        }
      case 258: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb9, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 259: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x98...0x9a, 0xa0...0xa3, 0xa6...0xaf, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 260: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 261: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x9e, 0xa0...0xa3, 0xa6...0xaf, 0xb1, 0xb2: state = 5
        default: break loop
        }
      case 262: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xba, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 263: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8f, 0x94...0xa3, 0xa6...0xbf: state = 5
        default: break loop
        }
      case 264: // main pre-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x96, 0x9a...0xb1, 0xb3...0xbb, 0xbd: state = 5
        default: break loop
        }
      case 265: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x8a, 0x8f...0x94, 0x96, 0x98...0x9f, 0xa6...0xaf, 0xb2...0xb4: state = 5
        default: break loop
        }
      case 266: // main pre-match.
        switch byte {
        case 0x81...0xba, 0xbf: state = 5
        default: break loop
        }
      case 267: // main pre-match.
        switch byte {
        case 0x80...0x9b: state = 5
        default: break loop
        }
      case 268: // main pre-match.
        switch byte {
        case 0x81, 0x82, 0x84, 0x87, 0x88, 0x8a, 0x8d, 0x94...0x97, 0x99...0x9f, 0xa1...0xa3, 0xa5, 0xa7, 0xaa, 0xab, 0xad...0xb9, 0xbb...0xbd: state = 5
        default: break loop
        }
      case 269: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x88...0x8d, 0x90...0x99, 0x9c...0x9f: state = 5
        default: break loop
        }
      case 270: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x89...0xac, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 271: // main pre-match.
        switch byte {
        case 0x80...0x97, 0x99...0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 272: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x9a: state = 5
        default: break loop
        }
      case 273: // int.
        switch byte {
        case 0x30...0x39: state = 273; end = pos+1; kind = .int
        case 0x5f: state = 97
        default: break loop
        }
      case 274: // stringSQ.
        break loop
      case 275: // main pre-match.
        switch byte {
        case 0x20...0x7e: state = 9
        case 0xc2...0xdf: state = 276
        case 0xe0: state = 277
        case 0xe1: state = 278
        case 0xe2...0xec: state = 279
        case 0xed: state = 280
        case 0xef: state = 281
        case 0xf0: state = 282
        case 0xf3: state = 283
        default: break loop
        }
      case 276: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 9
        default: break loop
        }
      case 277: // main pre-match.
        switch byte {
        case 0xa0...0xbf: state = 276
        default: break loop
        }
      case 278: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xac...0xbf: state = 276
        default: break loop
        }
      case 279: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 276
        default: break loop
        }
      case 280: // main pre-match.
        switch byte {
        case 0x80...0x9f: state = 276
        default: break loop
        }
      case 281: // main pre-match.
        switch byte {
        case 0xa4...0xbf: state = 276
        default: break loop
        }
      case 282: // main pre-match.
        switch byte {
        case 0x90: state = 585
        case 0x91: state = 586
        case 0x92: state = 587
        case 0x93: state = 588
        case 0x94: state = 589
        case 0x96: state = 590
        case 0x97, 0xa0...0xab: state = 279
        case 0x98: state = 591
        case 0x9b: state = 592
        case 0x9d: state = 593
        case 0x9e: state = 594
        case 0x9f: state = 595
        case 0xac: state = 596
        case 0xaf: state = 597
        default: break loop
        }
      case 283: // main pre-match.
        switch byte {
        case 0xa0: state = 529
        default: break loop
        }
      case 284: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 285: // main pre-match.
        switch byte {
        case 0x80...0x99: state = 5
        default: break loop
        }
      case 286: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x93...0x97, 0x9d...0xb6, 0xb8...0xbc, 0xbe: state = 5
        default: break loop
        }
      case 287: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x83, 0x84, 0x86...0xbf: state = 5
        default: break loop
        }
      case 288: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x93...0xbf: state = 5
        default: break loop
        }
      case 289: // main pre-match.
        switch byte {
        case 0x90...0xbf: state = 5
        default: break loop
        }
      case 290: // main pre-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xbf: state = 5
        default: break loop
        }
      case 291: // main pre-match.
        switch byte {
        case 0x80...0x87, 0xb0...0xbd: state = 5
        default: break loop
        }
      case 292: // main pre-match.
        switch byte {
        case 0x80...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 293: // main pre-match.
        switch byte {
        case 0x80...0x92, 0x94...0xa6, 0xa8...0xab, 0xb0...0xb4, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 294: // main pre-match.
        switch byte {
        case 0x80...0xbc: state = 5
        default: break loop
        }
      case 295: // main pre-match.
        switch byte {
        case 0x81...0xbf: state = 5
        default: break loop
        }
      case 296: // main pre-match.
        switch byte {
        case 0x80...0xbe: state = 5
        default: break loop
        }
      case 297: // main pre-match.
        switch byte {
        case 0x82...0x87, 0x8a...0x8f, 0x92...0x97, 0x9a...0x9c, 0xa0...0xa6, 0xa8...0xae, 0xbc, 0xbd: state = 5
        default: break loop
        }
      case 298: // intOct.
        switch byte {
        case 0x30...0x37: state = 298; end = pos+1; kind = .intOct
        case 0x5f: state = 149
        default: break loop
        }
      case 299: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x8d...0xa6, 0xa8...0xba, 0xbc, 0xbd, 0xbf: state = 5
        default: break loop
        }
      case 300: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9d: state = 5
        default: break loop
        }
      case 301: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x87...0xb3, 0xb7...0xbf: state = 5
        default: break loop
        }
      case 302: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9b, 0xa0: state = 5
        default: break loop
        }
      case 303: // main pre-match.
        switch byte {
        case 0x90...0xbd: state = 5
        default: break loop
        }
      case 304: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 305: // main pre-match.
        switch byte {
        case 0x80...0x90, 0xa0...0xbb: state = 5
        default: break loop
        }
      case 306: // main pre-match.
        switch byte {
        case 0x80...0xa3, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 307: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xba: state = 5
        default: break loop
        }
      case 308: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0x9f...0xbf: state = 5
        default: break loop
        }
      case 309: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x88...0x95: state = 5
        default: break loop
        }
      case 310: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 311: // main pre-match.
        switch byte {
        case 0x80...0x93, 0x98...0xbb: state = 5
        default: break loop
        }
      case 312: // main pre-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 313: // main pre-match.
        switch byte {
        case 0x80...0xa3, 0xaf: state = 5
        default: break loop
        }
      case 314: // main pre-match.
        switch byte {
        case 0x80...0xb6: state = 5
        default: break loop
        }
      case 315: // main pre-match.
        switch byte {
        case 0x80...0x95, 0xa0...0xa7: state = 5
        default: break loop
        }
      case 316: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x88, 0x8a...0xb5, 0xb7, 0xb8, 0xbc, 0xbf: state = 5
        default: break loop
        }
      case 317: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x97...0xbf: state = 5
        default: break loop
        }
      case 318: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa7...0xaf: state = 5
        default: break loop
        }
      case 319: // main pre-match.
        switch byte {
        case 0xa0...0xb2, 0xb4, 0xb5, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 320: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9f...0xb9, 0xbf: state = 5
        default: break loop
        }
      case 321: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 322: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85, 0x86, 0x8c...0x93, 0x95...0x97, 0x99...0xb3, 0xb8...0xba, 0xbf: state = 5
        default: break loop
        }
      case 323: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x98, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 324: // main pre-match.
        switch byte {
        case 0x80...0x9f: state = 5
        default: break loop
        }
      case 325: // main pre-match.
        switch byte {
        case 0x80...0xa6, 0xab...0xb6: state = 5
        default: break loop
        }
      case 326: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb9...0xbf: state = 5
        default: break loop
        }
      case 327: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb2, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 328: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x99...0x9c, 0xa9...0xaf: state = 5
        default: break loop
        }
      case 329: // main pre-match.
        switch byte {
        case 0x80...0x88: state = 5
        default: break loop
        }
      case 330: // main pre-match.
        switch byte {
        case 0x80...0xb2: state = 5
        default: break loop
        }
      case 331: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xba...0xbf: state = 5
        default: break loop
        }
      case 332: // main pre-match.
        switch byte {
        case 0xa0...0xbe: state = 5
        default: break loop
        }
      case 333: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 334: // main post-match.
        switch byte {
        case 0x80...0x99: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 335: // main post-match.
        switch byte {
        case 0x80...0x86, 0x93...0x97, 0x9d...0xb6, 0xb8...0xbc, 0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 336: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x83, 0x84, 0x86...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 337: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x93...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 338: // main post-match.
        switch byte {
        case 0x90...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 339: // main post-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 340: // main post-match.
        switch byte {
        case 0x80...0x87, 0xb0...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 341: // main post-match.
        switch byte {
        case 0x80...0x92, 0x94...0xa6, 0xa8...0xab, 0xb0...0xb4, 0xb6...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 342: // main post-match.
        switch byte {
        case 0x80...0xbc: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 343: // main post-match.
        switch byte {
        case 0x82...0x87, 0x8a...0x8f, 0x92...0x97, 0x9a...0x9c, 0xa0...0xa6, 0xa8...0xae, 0xbc, 0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 344: // main pre-match.
        switch byte {
        case 0x80...0xb5: state = 5
        default: break loop
        }
      case 345: // main pre-match.
        switch byte {
        case 0x80...0xa6, 0xa9...0xbf: state = 5
        default: break loop
        }
      case 346: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 347: // main pre-match.
        switch byte {
        case 0x80...0xa8: state = 5
        default: break loop
        }
      case 348: // main pre-match.
        switch byte {
        case 0x80...0x85: state = 5
        default: break loop
        }
      case 349: // main pre-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xb1: state = 5
        default: break loop
        }
      case 350: // main pre-match.
        switch byte {
        case 0x80...0x94, 0x96...0xbf: state = 5
        default: break loop
        }
      case 351: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0x9e, 0x9f, 0xa2, 0xa5, 0xa6, 0xa9...0xac, 0xae...0xb9, 0xbb, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 352: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0xbf: state = 5
        default: break loop
        }
      case 353: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87...0x8a, 0x8d...0x94, 0x96...0x9c, 0x9e...0xb9, 0xbb...0xbe: state = 5
        default: break loop
        }
      case 354: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x8a...0x90, 0x92...0xbf: state = 5
        default: break loop
        }
      case 355: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xa8...0xbf: state = 5
        default: break loop
        }
      case 356: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x8e...0xbf: state = 5
        default: break loop
        }
      case 357: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x9b...0x9f, 0xa1...0xaf: state = 5
        default: break loop
        }
      case 358: // main pre-match.
        switch byte {
        case 0x80...0x9d: state = 5
        default: break loop
        }
      case 359: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x92...0xaf, 0xbf: state = 5
        default: break loop
        }
      case 360: // main pre-match.
        switch byte {
        case 0x80...0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 361: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x90...0xa8, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 362: // main pre-match.
        switch byte {
        case 0x80...0xb4, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 363: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x90...0xb6: state = 5
        default: break loop
        }
      case 364: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9f, 0xa1...0xb4: state = 5
        default: break loop
        }
      case 365: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x93...0xbe: state = 5
        default: break loop
        }
      case 366: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x8a...0x8d, 0x8f...0x9d, 0x9f...0xa9, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 367: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 368: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 369: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x90, 0x97, 0x9d...0xa3, 0xa6...0xac, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 370: // main pre-match.
        switch byte {
        case 0x80...0x99, 0x9b, 0x9d: state = 5
        default: break loop
        }
      case 371: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99: state = 5
        default: break loop
        }
      case 372: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 373: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x90...0x99, 0xa0...0xac: state = 5
        default: break loop
        }
      case 374: // main pre-match.
        switch byte {
        case 0x80...0xb7: state = 5
        default: break loop
        }
      case 375: // main pre-match.
        switch byte {
        case 0x80...0x89: state = 5
        default: break loop
        }
      case 376: // main pre-match.
        switch byte {
        case 0x80...0x99, 0x9d...0xab, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 377: // main pre-match.
        switch byte {
        case 0xa0...0xbf: state = 5
        default: break loop
        }
      case 378: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xbf: state = 5
        default: break loop
        }
      case 379: // main pre-match.
        switch byte {
        case 0x80...0xb8: state = 5
        default: break loop
        }
      case 380: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xb6, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 381: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x90...0xac, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 382: // main pre-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xa7, 0xa9...0xb6: state = 5
        default: break loop
        }
      case 383: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87, 0x8d, 0x90...0xbf: state = 5
        default: break loop
        }
      case 384: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x96, 0x98, 0x9a...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 385: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0xb0, 0xb2...0xb5, 0xb8...0xbe: state = 5
        default: break loop
        }
      case 386: // main pre-match.
        switch byte {
        case 0x80, 0x82...0x85, 0x88...0x96, 0x98...0xbf: state = 5
        default: break loop
        }
      case 387: // main pre-match.
        switch byte {
        case 0x80...0x90, 0x92...0x95, 0x98...0xbf: state = 5
        default: break loop
        }
      case 388: // main pre-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xbc: state = 5
        default: break loop
        }
      case 389: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbd: state = 5
        default: break loop
        }
      case 390: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x94, 0xa0...0xb6: state = 5
        default: break loop
        }
      case 391: // main pre-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xac, 0xae...0xb0, 0xb2, 0xb3: state = 5
        default: break loop
        }
      case 392: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 393: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 394: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 395: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xab, 0xb0...0xbb: state = 5
        default: break loop
        }
      case 396: // main pre-match.
        switch byte {
        case 0x80, 0x84...0xad, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 397: // main pre-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 398: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x90...0x9a, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 399: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 400: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbc, 0xbf: state = 5
        default: break loop
        }
      case 401: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x90...0x99, 0xa0...0xad, 0xb0...0xbe: state = 5
        default: break loop
        }
      case 402: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbc: state = 5
        default: break loop
        }
      case 403: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 404: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 405: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8d...0xbf: state = 5
        default: break loop
        }
      case 406: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xb6, 0xb8, 0xb9: state = 5
        default: break loop
        }
      case 407: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 408: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 409: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x88...0x8d, 0x90...0x97, 0x99, 0x9b, 0x9d, 0x9f...0xbd: state = 5
        default: break loop
        }
      case 410: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x93, 0x96...0x9b, 0x9d...0xaf, 0xb2...0xb4, 0xb6...0xbe: state = 5
        default: break loop
        }
      case 411: // main pre-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xae, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 412: // main pre-match.
        switch byte {
        case 0x81...0x8f, 0x91...0xb5: state = 5
        default: break loop
        }
      case 413: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xae, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 414: // main pre-match.
        switch byte {
        case 0x80...0xac: state = 5
        default: break loop
        }
      case 415: // main pre-match.
        switch byte {
        case 0xa6...0xbf: state = 5
        default: break loop
        }
      case 416: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbb: state = 5
        default: break loop
        }
      case 417: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90, 0x91: state = 5
        default: break loop
        }
      case 418: // main pre-match.
        switch byte {
        case 0x80...0x92, 0xa0...0xac, 0xb0...0xb6: state = 5
        default: break loop
        }
      case 419: // main pre-match.
        switch byte {
        case 0x80...0xb3: state = 5
        default: break loop
        }
      case 420: // main pre-match.
        switch byte {
        case 0x80...0x94: state = 5
        default: break loop
        }
      case 421: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbf: state = 5
        default: break loop
        }
      case 422: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 423: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xad: state = 5
        default: break loop
        }
      case 424: // main pre-match.
        switch byte {
        case 0x90...0x9e, 0xa0...0xa7, 0xb0, 0xb3...0xbe: state = 5
        default: break loop
        }
      case 425: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0x9e: state = 5
        default: break loop
        }
      case 426: // main pre-match.
        switch byte {
        case 0x80...0x91: state = 5
        default: break loop
        }
      case 427: // main pre-match.
        switch byte {
        case 0x80: state = 5
        default: break loop
        }
      case 428: // pub.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 429: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x63, 0x65...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x64: state = 645; end = pos+1; kind = .method
        default: break loop
        }
      case 430: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x74: state = 560; end = pos+1; kind = .sym
        default: break loop
        }
      case 431: // where.
        break loop
      case 432: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xa9, 0xaf...0xbf: state = 5
        default: break loop
        }
      case 433: // main pre-match.
        switch byte {
        case 0x80...0x9f, 0xb0, 0xb1, 0xb4...0xbf: state = 5
        default: break loop
        }
      case 434: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9c, 0xa0...0xbe: state = 5
        default: break loop
        }
      case 435: // main pre-match.
        switch byte {
        case 0x90...0xb0: state = 5
        default: break loop
        }
      case 436: // main pre-match.
        switch byte {
        case 0x80...0xa6: state = 5
        default: break loop
        }
      case 437: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 438: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 439: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb9, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 440: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x91, 0xac...0xaf: state = 5
        default: break loop
        }
      case 441: // main pre-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 442: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 443: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xb9...0xbf: state = 5
        default: break loop
        }
      case 444: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xa7, 0xad, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 445: // main pre-match.
        switch byte {
        case 0x80...0xa7, 0xaf, 0xb0, 0xbf: state = 5
        default: break loop
        }
      case 446: // main pre-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xb6, 0xb8...0xbe: state = 5
        default: break loop
        }
      case 447: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88...0x8e, 0x90...0x96, 0x98...0x9e, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 448: // main pre-match.
        switch byte {
        case 0x80...0x84: state = 5
        default: break loop
        }
      case 449: // main pre-match.
        switch byte {
        case 0x80...0x99, 0x9b...0xbf: state = 5
        default: break loop
        }
      case 450: // main pre-match.
        switch byte {
        case 0x80...0x95, 0xb0...0xbb: state = 5
        default: break loop
        }
      case 451: // main pre-match.
        switch byte {
        case 0x84...0x86: state = 156
        case 0x87: state = 465
        default: break loop
        }
      case 452: // intHex.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 452; end = pos+1; kind = .intHex
        case 0x5f: state = 601
        default: break loop
        }
      case 453: // flt.
        switch byte {
        case 0x30...0x39: state = 453; end = pos+1; kind = .flt
        default: break loop
        }
      case 454: // main pre-match.
        switch byte {
        case 0x80...0xae: state = 5
        default: break loop
        }
      case 455: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xa9, 0xae, 0xaf: state = 5
        default: break loop
        }
      case 456: // main pre-match.
        switch byte {
        case 0x90...0xad, 0xb0...0xb5: state = 5
        default: break loop
        }
      case 457: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x90...0x99, 0x9b...0xa1, 0xa3...0xb7, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 458: // main pre-match.
        switch byte {
        case 0x80...0x8f: state = 5
        default: break loop
        }
      case 459: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x90...0xbe: state = 5
        default: break loop
        }
      case 460: // main pre-match.
        switch byte {
        case 0x8f...0x9f: state = 5
        default: break loop
        }
      case 461: // main pre-match.
        switch byte {
        case 0xa0: state = 5
        default: break loop
        }
      case 462: // main pre-match.
        switch byte {
        case 0x80...0xa1: state = 5
        default: break loop
        }
      case 463: // main pre-match.
        switch byte {
        case 0x80...0xb4: state = 5
        default: break loop
        }
      case 464: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 465: // main pre-match.
        switch byte {
        case 0x80...0xaf: state = 5
        default: break loop
        }
      case 466: // intDec.
        switch byte {
        case 0x30...0x39: state = 466; end = pos+1; kind = .intDec
        case 0x5f: state = 642
        default: break loop
        }
      case 467: // main pre-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 468: // main pre-match.
        switch byte {
        case 0x80...0x83: state = 5
        default: break loop
        }
      case 469: // intBin.
        switch byte {
        case 0x30, 0x31: state = 469; end = pos+1; kind = .intBin
        case 0x5f: state = 577
        default: break loop
        }
      case 470: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6e: state = 648; end = pos+1; kind = .polyfn
        default: break loop
        }
      case 471: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xbf: state = 5
        default: break loop
        }
      case 472: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x90...0xbf: state = 5
        default: break loop
        }
      case 473: // main pre-match.
        switch byte {
        case 0x80...0xab: state = 5
        default: break loop
        }
      case 474: // main pre-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb7: state = 5
        default: break loop
        }
      case 475: // main pre-match.
        switch byte {
        case 0xb7...0xbf: state = 5
        default: break loop
        }
      case 476: // main pre-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 477: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x8e...0x99, 0xa0...0xbd: state = 5
        default: break loop
        }
      case 478: // main pre-match.
        switch byte {
        case 0x80...0x93, 0x9f...0xbc: state = 5
        default: break loop
        }
      case 479: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x8f...0x99, 0x9e...0xbe: state = 5
        default: break loop
        }
      case 480: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0x9c...0xbf: state = 5
        default: break loop
        }
      case 481: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x9b...0xb6: state = 5
        default: break loop
        }
      case 482: // main pre-match.
        switch byte {
        case 0x81...0x86, 0x89...0x8e, 0x91...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 483: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 484: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 485: // main post-match.
        switch byte {
        case 0x84...0x86: state = 47
        case 0x87: state = 650
        default: break loop
        }
      case 486: // typeAlias.
        break loop
      case 487: // main pre-match.
        switch byte {
        case 0x80...0x96: state = 5
        default: break loop
        }
      case 488: // main pre-match.
        switch byte {
        case 0x80, 0x81: state = 5
        default: break loop
        }
      case 489: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbc: state = 5
        default: break loop
        }
      case 490: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90...0x99, 0x9c...0x9f: state = 5
        default: break loop
        }
      case 491: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61, 0x62, 0x64...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x63: state = 641; end = pos+1; kind = .sym
        default: break loop
        }
      case 492: // main post-match.
        switch byte {
        case 0x80: state = 530
        case 0x81: state = 531
        case 0x82, 0x85, 0x90, 0x91, 0x98...0x9b, 0xb0: state = 47
        case 0x83: state = 59
        case 0x84: state = 532
        case 0x86: state = 533
        case 0x87: state = 534
        case 0x8a: state = 122
        case 0x8b: state = 535
        case 0x8c: state = 110
        case 0x8d: state = 536
        case 0x8e: state = 537
        case 0x8f: state = 538
        case 0x92: state = 539
        case 0x93: state = 540
        case 0x94: state = 541
        case 0x95: state = 542
        case 0x9c: state = 190
        case 0x9d: state = 543
        case 0xa0: state = 544
        case 0xa1: state = 545
        case 0xa2: state = 546
        case 0xa3: state = 547
        case 0xa4: state = 548
        case 0xa6: state = 549
        case 0xa7: state = 339
        case 0xa8: state = 550
        case 0xa9: state = 551
        case 0xaa: state = 552
        case 0xab: state = 553
        case 0xac: state = 554
        case 0xad: state = 555
        case 0xae: state = 556
        case 0xb1: state = 142
        case 0xb2: state = 557
        case 0xb3: state = 558
        case 0xb9: state = 559
        default: break loop
        }
      case 493: // main post-match.
        switch byte {
        case 0x80, 0x86, 0x90, 0x92, 0x98: state = 47
        case 0x81: state = 619
        case 0x82: state = 620
        case 0x83: state = 621
        case 0x84: state = 147
        case 0x85: state = 622
        case 0x87: state = 623
        case 0x88: state = 624
        case 0x8a: state = 625
        case 0x8b: state = 626
        case 0x8c: state = 627
        case 0x8d: state = 628
        case 0x91: state = 629
        case 0x93: state = 630
        case 0x96: state = 631
        case 0x97: state = 632
        case 0x99: state = 633
        case 0x9a: state = 128
        case 0x9b: state = 634
        case 0x9c: state = 635
        case 0xa2: state = 636
        case 0xa3: state = 637
        case 0xab: state = 123
        case 0xb0: state = 638
        case 0xb1: state = 639
        case 0xb2: state = 640
        default: break loop
        }
      case 494: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90, 0x92...0x94: state = 47
        case 0x8e: state = 334
        case 0x91: state = 603
        case 0x95: state = 604
        default: break loop
        }
      case 495: // main post-match.
        switch byte {
        case 0x80...0x8f: state = 47
        case 0x90: state = 602
        default: break loop
        }
      case 496: // main post-match.
        switch byte {
        case 0x90...0x98: state = 47
        case 0x99: state = 644
        default: break loop
        }
      case 497: // main post-match.
        switch byte {
        case 0xa0...0xa7, 0xac, 0xbc: state = 47
        case 0xa8: state = 123
        case 0xa9: state = 521
        case 0xab: state = 522
        case 0xad: state = 523
        case 0xae: state = 524
        case 0xbd: state = 525
        case 0xbe: state = 526
        case 0xbf: state = 527
        default: break loop
        }
      case 498: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xaa: state = 47
        case 0x9f: state = 564
        case 0xab: state = 557
        default: break loop
        }
      case 499: // main post-match.
        switch byte {
        case 0x80: state = 598
        case 0xb0: state = 47
        case 0xb1: state = 599
        case 0xb2: state = 600
        default: break loop
        }
      case 500: // main post-match.
        switch byte {
        case 0x80...0x82, 0x86, 0x88, 0x8c, 0x90, 0x96...0x99, 0x9b...0x9e, 0xa0...0xa9: state = 47
        case 0x83: state = 130
        case 0x84: state = 508
        case 0x85: state = 509
        case 0x87: state = 510
        case 0x89: state = 511
        case 0x8d: state = 512
        case 0x91: state = 513
        case 0x92: state = 514
        case 0x93: state = 515
        case 0x94: state = 516
        case 0x95: state = 517
        case 0x9a: state = 518
        case 0x9f: state = 519
        case 0xaa: state = 520
        default: break loop
        }
      case 501: // main post-match.
        switch byte {
        case 0x80: state = 605
        case 0xa0...0xa2, 0xa4: state = 47
        case 0xa3: state = 606
        case 0xa5: state = 607
        case 0xb8: state = 608
        case 0xb9: state = 609
        case 0xba: state = 610
        case 0xbb: state = 611
        default: break loop
        }
      case 502: // main post-match.
        switch byte {
        case 0x80, 0x85: state = 133
        case 0x81, 0x8c...0x9a, 0x9c, 0x9e: state = 47
        case 0x82: state = 561
        case 0x83: state = 562
        case 0x84: state = 563
        case 0x86: state = 564
        case 0x87: state = 565
        case 0x88: state = 566
        case 0x89: state = 567
        case 0x9b: state = 568
        case 0x9d: state = 92
        case 0x9f: state = 569
        case 0xa0: state = 76
        case 0xa1: state = 570
        case 0xa2: state = 571
        case 0xa4: state = 572
        case 0xa5: state = 573
        case 0xa6: state = 574
        case 0xa7: state = 575
        default: break loop
        }
      case 503: // main post-match.
        switch byte {
        case 0x80...0x9a, 0x9c...0xbf: state = 47
        case 0x9b: state = 647
        default: break loop
        }
      case 504: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9d...0x9f, 0xa1...0xbf: state = 47
        case 0x9c: state = 612
        case 0xa0: state = 613
        default: break loop
        }
      case 505: // main post-match.
        switch byte {
        case 0x80...0xb9: state = 47
        case 0xba: state = 646
        default: break loop
        }
      case 506: // main post-match.
        switch byte {
        case 0xa0...0xa7: state = 47
        case 0xa8: state = 632
        default: break loop
        }
      case 507: // main pre-match.
        switch byte {
        case 0x80...0x86: state = 5
        default: break loop
        }
      case 508: // main post-match.
        switch byte {
        case 0x80...0xa6, 0xa9...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 509: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xbb...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 510: // main post-match.
        switch byte {
        case 0x80...0xa8: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 511: // main post-match.
        switch byte {
        case 0x80...0x85: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 512: // main post-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xb1: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 513: // main post-match.
        switch byte {
        case 0x80...0x94, 0x96...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 514: // main post-match.
        switch byte {
        case 0x80...0x9c, 0x9e, 0x9f, 0xa2, 0xa5, 0xa6, 0xa9...0xac, 0xae...0xb9, 0xbb, 0xbd...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 515: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 516: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87...0x8a, 0x8d...0x94, 0x96...0x9c, 0x9e...0xb9, 0xbb...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 517: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x8a...0x90, 0x92...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 518: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xa8...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 519: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x8e...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 520: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x9b...0x9f, 0xa1...0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 521: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xa9, 0xae, 0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 522: // main post-match.
        switch byte {
        case 0x90...0xad, 0xb0...0xb5: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 523: // main post-match.
        switch byte {
        case 0x80...0x85, 0x90...0x99, 0x9b...0xa1, 0xa3...0xb7, 0xbd...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 524: // main post-match.
        switch byte {
        case 0x80...0x8f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 525: // main post-match.
        switch byte {
        case 0x80...0x84, 0x90...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 526: // main post-match.
        switch byte {
        case 0x8f...0x9f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 527: // main post-match.
        switch byte {
        case 0xa0: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 528: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x8b...0xbb: state = 5
        default: break loop
        }
      case 529: // main pre-match.
        switch byte {
        case 0x84...0x87: state = 276
        default: break loop
        }
      case 530: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x8d...0xa6, 0xa8...0xba, 0xbc, 0xbd, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 531: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9d: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 532: // main post-match.
        switch byte {
        case 0x80...0x82, 0x87...0xb3, 0xb7...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 533: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9b, 0xa0: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 534: // main post-match.
        switch byte {
        case 0x90...0xbd: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 535: // main post-match.
        switch byte {
        case 0x80...0x90, 0xa0...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 536: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xba: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 537: // main post-match.
        switch byte {
        case 0x80...0x9d, 0x9f...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 538: // main post-match.
        switch byte {
        case 0x80...0x83, 0x88...0x95: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 539: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 540: // main post-match.
        switch byte {
        case 0x80...0x93, 0x98...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 541: // main post-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 542: // main post-match.
        switch byte {
        case 0x80...0xa3, 0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 543: // main post-match.
        switch byte {
        case 0x80...0x95, 0xa0...0xa7: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 544: // main post-match.
        switch byte {
        case 0x80...0x85, 0x88, 0x8a...0xb5, 0xb7, 0xb8, 0xbc, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 545: // main post-match.
        switch byte {
        case 0x80...0x95, 0x97...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 546: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa7...0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 547: // main post-match.
        switch byte {
        case 0xa0...0xb2, 0xb4, 0xb5, 0xbb...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 548: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9f...0xb9, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 549: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 550: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85, 0x86, 0x8c...0x93, 0x95...0x97, 0x99...0xb3, 0xb8...0xba, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 551: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x98, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 552: // main post-match.
        switch byte {
        case 0x80...0x9f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 553: // main post-match.
        switch byte {
        case 0x80...0xa6, 0xab...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 554: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb9...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 555: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb2, 0xb8...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 556: // main post-match.
        switch byte {
        case 0x80...0x91, 0x99...0x9c, 0xa9...0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 557: // main post-match.
        switch byte {
        case 0x80...0xb2: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 558: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xba...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 559: // main post-match.
        switch byte {
        case 0xa0...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 560: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x5f: state = 615; end = pos+1; kind = .sym
        default: break loop
        }
      case 561: // main post-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xae, 0xb1...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 562: // main post-match.
        switch byte {
        case 0x81...0x8f, 0x91...0xb5: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 563: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xae, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 564: // main post-match.
        switch byte {
        case 0x80...0xac: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 565: // main post-match.
        switch byte {
        case 0xa6...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 566: // main post-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 567: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90, 0x91: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 568: // main post-match.
        switch byte {
        case 0x80...0x92, 0xa0...0xac, 0xb0...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 569: // main post-match.
        switch byte {
        case 0x80...0x94: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 570: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 571: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xad: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 572: // main post-match.
        switch byte {
        case 0x90...0x9e, 0xa0...0xa7, 0xb0, 0xb3...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 573: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0x9e: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 574: // main post-match.
        switch byte {
        case 0x80...0x91: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 575: // main post-match.
        switch byte {
        case 0x80: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 576: // intQuat.
        switch byte {
        case 0x30...0x33: state = 576; end = pos+1; kind = .intQuat
        case 0x5f: state = 649
        default: break loop
        }
      case 577: // main post-match.
        switch byte {
        case 0x30, 0x31: state = 614; end = pos+1; kind = .intBin
        default: break loop
        }
      case 578: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88...0x98, 0x9b...0xa1, 0xa3, 0xa4, 0xa6...0xaa: state = 5
        default: break loop
        }
      case 579: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87...0x96: state = 5
        default: break loop
        }
      case 580: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0x99, 0x9e, 0x9f: state = 5
        default: break loop
        }
      case 581: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x9f, 0xa1, 0xa2, 0xa4, 0xa7, 0xa9...0xb2, 0xb4...0xb7, 0xb9, 0xbb: state = 5
        default: break loop
        }
      case 582: // main pre-match.
        switch byte {
        case 0x82, 0x87, 0x89, 0x8b, 0x8d...0x8f, 0x91, 0x92, 0x94, 0x97, 0x99, 0x9b, 0x9d, 0x9f, 0xa1, 0xa2, 0xa4, 0xa7...0xaa, 0xac...0xb2, 0xb4...0xb7, 0xb9...0xbc, 0xbe: state = 5
        default: break loop
        }
      case 583: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8b...0x9b, 0xa1...0xa3, 0xa5...0xa9, 0xab...0xbb: state = 5
        default: break loop
        }
      case 584: // main pre-match.
        switch byte {
        case 0xb0, 0xb1: state = 5
        default: break loop
        }
      case 585: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x8a...0x95, 0x98...0x9d, 0xa0...0xa4, 0xa6...0xae, 0xb0...0xb3, 0xb9: state = 276
        default: break loop
        }
      case 586: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x93, 0x96...0x9c, 0xa2, 0xa3, 0xab, 0xb0...0xb2: state = 276
        default: break loop
        }
      case 587: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x95: state = 276
        default: break loop
        }
      case 588: // main pre-match.
        switch byte {
        case 0x80...0x90: state = 276
        default: break loop
        }
      case 589: // main pre-match.
        switch byte {
        case 0x90...0x99: state = 276
        default: break loop
        }
      case 590: // main pre-match.
        switch byte {
        case 0xa0...0xa9, 0xab...0xae, 0xbc...0xbf: state = 276
        default: break loop
        }
      case 591: // main pre-match.
        switch byte {
        case 0x80...0xab: state = 276
        default: break loop
        }
      case 592: // main pre-match.
        switch byte {
        case 0x80, 0xb0...0xb2: state = 276
        default: break loop
        }
      case 593: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8c, 0x8d, 0x90...0xaa: state = 276
        default: break loop
        }
      case 594: // main pre-match.
        switch byte {
        case 0x80, 0xa0...0xa5, 0xb8...0xbb: state = 276
        default: break loop
        }
      case 595: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8c...0xa2, 0xa4...0xa7: state = 276
        default: break loop
        }
      case 596: // main pre-match.
        switch byte {
        case 0x80...0xba: state = 276
        default: break loop
        }
      case 597: // main pre-match.
        switch byte {
        case 0xa0...0xa8: state = 276
        default: break loop
        }
      case 598: // main post-match.
        switch byte {
        case 0x80, 0x81: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 599: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbc: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 600: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90...0x99, 0x9c...0x9f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 601: // main post-match.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 643; end = pos+1; kind = .intHex
        default: break loop
        }
      case 602: // main post-match.
        switch byte {
        case 0x80...0xae: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 603: // main post-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 604: // main post-match.
        switch byte {
        case 0x80...0x83: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 605: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88...0x98, 0x9b...0xa1, 0xa3, 0xa4, 0xa6...0xaa: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 606: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87...0x96: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 607: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0x99, 0x9e, 0x9f: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 608: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x9f, 0xa1, 0xa2, 0xa4, 0xa7, 0xa9...0xb2, 0xb4...0xb7, 0xb9, 0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 609: // main post-match.
        switch byte {
        case 0x82, 0x87, 0x89, 0x8b, 0x8d...0x8f, 0x91, 0x92, 0x94, 0x97, 0x99, 0x9b, 0x9d, 0x9f, 0xa1, 0xa2, 0xa4, 0xa7...0xaa, 0xac...0xb2, 0xb4...0xb7, 0xb9...0xbc, 0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 610: // main post-match.
        switch byte {
        case 0x80...0x89, 0x8b...0x9b, 0xa1...0xa3, 0xa5...0xa9, 0xab...0xbb: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 611: // main post-match.
        switch byte {
        case 0xb0, 0xb1: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 612: // main post-match.
        switch byte {
        case 0x80...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 613: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 614: // intBin.
        switch byte {
        case 0x30, 0x31: state = 614; end = pos+1; kind = .intBin
        case 0x5f: state = 577
        default: break loop
        }
      case 615: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75, 0x77...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x74: state = 652; end = pos+1; kind = .sym
        case 0x76: state = 653; end = pos+1; kind = .sym
        default: break loop
        }
      case 616: // main pre-match.
        switch byte {
        case 0x80...0x96, 0x99...0xbf: state = 5
        default: break loop
        }
      case 617: // main pre-match.
        switch byte {
        case 0x85...0xad, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 618: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0xba: state = 5
        default: break loop
        }
      case 619: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x92...0xaf, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 620: // main post-match.
        switch byte {
        case 0x80...0xbc, 0xbe, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 621: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x90...0xa8, 0xb0...0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 622: // main post-match.
        switch byte {
        case 0x80...0x83, 0x90...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 623: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9f, 0xa1...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 624: // main post-match.
        switch byte {
        case 0x80...0x91, 0x93...0xbe: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 625: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x8a...0x8d, 0x8f...0x9d, 0x9f...0xa9, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 626: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xb9: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 627: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 628: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x90, 0x97, 0x9d...0xa3, 0xa6...0xac, 0xb0...0xb4: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 629: // main post-match.
        switch byte {
        case 0x80...0x99, 0x9b, 0x9d: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 630: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 631: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 632: // main post-match.
        switch byte {
        case 0x80...0x9d: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 633: // main post-match.
        switch byte {
        case 0x80...0x84, 0x90...0x99, 0xa0...0xac: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 634: // main post-match.
        switch byte {
        case 0x80...0x89: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 635: // main post-match.
        switch byte {
        case 0x80...0x99, 0x9d...0xab, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 636: // main post-match.
        switch byte {
        case 0xa0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 637: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 638: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xb6, 0xb8...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 639: // main post-match.
        switch byte {
        case 0x80...0x85, 0x90...0xac, 0xb0...0xbf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 640: // main post-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xa7, 0xa9...0xb6: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 641: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x67, 0x69...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x68: state = 651; end = pos+1; kind = .match
        default: break loop
        }
      case 642: // main post-match.
        switch byte {
        case 0x30...0x39: state = 654; end = pos+1; kind = .intDec
        default: break loop
        }
      case 643: // intHex.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 643; end = pos+1; kind = .intHex
        case 0x5f: state = 601
        default: break loop
        }
      case 644: // main post-match.
        switch byte {
        case 0x80...0x86: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 645: // method.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 646: // main post-match.
        switch byte {
        case 0x80...0xa1: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 647: // main post-match.
        switch byte {
        case 0x80...0x96: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 648: // polyfn.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 649: // main post-match.
        switch byte {
        case 0x30...0x33: state = 655; end = pos+1; kind = .intQuat
        default: break loop
        }
      case 650: // main post-match.
        switch byte {
        case 0x80...0xaf: state = 45; end = pos+1; kind = .comment
        default: break loop
        }
      case 651: // match.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 652: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x78, 0x7a: state = 38; end = pos+1; kind = .sym
        case 0x79: state = 657; end = pos+1; kind = .sym
        default: break loop
        }
      case 653: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x62...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x61: state = 656; end = pos+1; kind = .sym
        default: break loop
        }
      case 654: // intDec.
        switch byte {
        case 0x30...0x39: state = 654; end = pos+1; kind = .intDec
        case 0x5f: state = 642
        default: break loop
        }
      case 655: // intQuat.
        switch byte {
        case 0x30...0x33: state = 655; end = pos+1; kind = .intQuat
        case 0x5f: state = 649
        default: break loop
        }
      case 656: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6b, 0x6d...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x6c: state = 658; end = pos+1; kind = .host_val
        default: break loop
        }
      case 657: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6f, 0x71...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x70: state = 659; end = pos+1; kind = .sym
        default: break loop
        }
      case 658: // host_val.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }
      case 659: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x64, 0x66...0x7a: state = 38; end = pos+1; kind = .sym
        case 0x65: state = 660; end = pos+1; kind = .host_type
        default: break loop
        }
      case 660: // host_type.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 38; end = pos+1; kind = .sym
        default: break loop
        }

      default: fatalError("Lexer.next: impossible state: \(state)")
      }
      if byte == 0x0a {
        source.newlinePositions.append(pos)
      }
      pos += 1
    }

    // matching stopped or reached end of text.
    if pos == self.pos { // no more tokens; done.
      assert(pos == source.text.count)
      return nil
    }

    let tokenPos = self.pos
    let tokenEnd = end ?? pos
    assert(tokenPos < tokenEnd, "tokenPos: \(tokenPos); tokenEnd: \(tokenEnd)")
    if end == nil { assert(kind == .incomplete) }
    self.pos = tokenEnd
    if kind == popKind {
      stack.removeLast()
    } else {
      if let childPair = Lexer.modeTransitions[modeStart]?[kind] {
        stack.append(childPair)
      }
    }
    return Token(pos: tokenPos, end: tokenEnd, linePos: linePos, lineIdx: lineIdx, kind: kind)
  }

  private static let modeTransitions: Dictionary<UInt, Dictionary<TokenKind, (UInt, TokenKind?)>> = [
:
  ]
}

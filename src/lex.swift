// Â© 2017 George King. Permission to use this file is granted in license-quilt.txt.
// This file was generated by legs from ploy.legs.

import Foundation


public enum LexMode: Int, Comparable {
  case main = 0

  public var startState: Int { return rawValue }

  public static func < (l: LexMode, r: LexMode) -> Bool { return l.rawValue < r.rawValue }
}


public enum TokenKind: Int, Comparable, CustomStringConvertible {
  case acc
  case and
  case angleC
  case angleO
  case ann
  case bind
  case bling
  case braceC
  case braceO
  case brackC
  case brackO
  case call
  case caret
  case case_
  case comment
  case dash
  case flt
  case fn
  case host_type
  case host_val
  case if_
  case in_
  case incomplete
  case int
  case intBin
  case intDec
  case intHex
  case intOct
  case intQuat
  case intersection
  case invalid
  case match
  case method
  case newline
  case or
  case parenC
  case parenO
  case polyfn
  case pub
  case semicolon
  case sig
  case slash
  case spaces
  case stringDQ
  case stringSQ
  case sym
  case tabs
  case tagTest
  case typeAlias
  case typeVar
  case union
  case where_

  public static func < (l: TokenKind, r: TokenKind) -> Bool { return l.rawValue < r.rawValue }

  public var description: String {
    switch self {
    case .acc: return "`@`"
    case .and: return "`and`"
    case .angleC: return "`>`"
    case .angleO: return "`<`"
    case .ann: return "`:`"
    case .bind: return "`=`"
    case .bling: return "`$`"
    case .braceC: return "`}`"
    case .braceO: return "`{`"
    case .brackC: return "`]`"
    case .brackO: return "`[`"
    case .call: return "`.`"
    case .caret: return "`^`"
    case .case_: return "`?`"
    case .comment: return "comment"
    case .dash: return "`-`"
    case .flt: return "flt"
    case .fn: return "`fn`"
    case .host_type: return "`host_type`"
    case .host_val: return "`host_val`"
    case .if_: return "`if`"
    case .in_: return "`in`"
    case .incomplete: return "incomplete"
    case .int: return "int"
    case .intBin: return "intBin"
    case .intDec: return "intDec"
    case .intHex: return "intHex"
    case .intOct: return "intOct"
    case .intQuat: return "intQuat"
    case .intersection: return "`&`"
    case .invalid: return "invalid"
    case .match: return "`match`"
    case .method: return "`method`"
    case .newline: return "newline"
    case .or: return "`or`"
    case .parenC: return "`)`"
    case .parenO: return "`(`"
    case .polyfn: return "`polyfn`"
    case .pub: return "`pub`"
    case .semicolon: return "`;`"
    case .sig: return "`%`"
    case .slash: return "`/`"
    case .spaces: return "spaces"
    case .stringDQ: return "stringDQ"
    case .stringSQ: return "stringSQ"
    case .sym: return "sym"
    case .tabs: return "tabs"
    case .tagTest: return "`@?`"
    case .typeAlias: return "`=:`"
    case .typeVar: return "`::`"
    case .union: return "`|`"
    case .where_: return "`:?`"
    }
  }
}


public struct Lexer: Sequence, IteratorProtocol {

  public typealias Element = Token<TokenKind>
  public typealias Iterator = Lexer

  public let source: Source

  private var stack: [(LexMode, TokenKind?)] = [(.main, nil)]
  private var pos: Int = 0

  public init(source: Source) {
    self.source = source
  }

  public mutating func next() -> Token<TokenKind>? {

    if self.pos == source.text.count { // Done.
      return nil
    }

    let (mode, popKind) = self.stack.last!
    let linePos = (source.newlinePositions.last ?? -1) + 1
    let lineIdx = source.newlinePositions.count

    var pos = self.pos
    var state = mode.startState
    var last: Int = -1
    var kind: TokenKind = .incomplete

    loop: while pos < source.text.count {
      let byte = source.text[pos]

      switch state {

      case 0: // main pre-match.
        switch byte {
        case 0x0...0x8, 0xb...0x1f, 0x21, 0x23, 0x2a...0x2c, 0x5c, 0x60, 0x7e...0xff: state = 1; last = pos; kind = .invalid
        case 0x9: state = 2; last = pos; kind = .tabs
        case 0xa: state = 3; last = pos; kind = .newline
        case 0x20: state = 4; last = pos; kind = .spaces
        case 0x22: state = 5
        case 0x24: state = 6; last = pos; kind = .bling
        case 0x25: state = 7; last = pos; kind = .sig
        case 0x26: state = 8; last = pos; kind = .intersection
        case 0x27: state = 9
        case 0x28: state = 10; last = pos; kind = .parenO
        case 0x29: state = 11; last = pos; kind = .parenC
        case 0x2d: state = 12; last = pos; kind = .dash
        case 0x2e: state = 13; last = pos; kind = .call
        case 0x2f: state = 14; last = pos; kind = .slash
        case 0x30: state = 15; last = pos; kind = .int
        case 0x31...0x39: state = 16; last = pos; kind = .int
        case 0x3a: state = 17; last = pos; kind = .ann
        case 0x3b: state = 18; last = pos; kind = .semicolon
        case 0x3c: state = 19; last = pos; kind = .angleO
        case 0x3d: state = 20; last = pos; kind = .bind
        case 0x3e: state = 21; last = pos; kind = .angleC
        case 0x3f: state = 22; last = pos; kind = .case_
        case 0x40: state = 23; last = pos; kind = .acc
        case 0x41...0x5a, 0x5f, 0x62...0x65, 0x67, 0x6a...0x6c, 0x6e, 0x71...0x7a: state = 24; last = pos; kind = .sym
        case 0x5b: state = 25; last = pos; kind = .brackO
        case 0x5d: state = 26; last = pos; kind = .brackC
        case 0x5e: state = 27; last = pos; kind = .caret
        case 0x61: state = 28; last = pos; kind = .sym
        case 0x66: state = 29; last = pos; kind = .sym
        case 0x68: state = 30; last = pos; kind = .sym
        case 0x69: state = 31; last = pos; kind = .sym
        case 0x6d: state = 32; last = pos; kind = .sym
        case 0x6f: state = 33; last = pos; kind = .sym
        case 0x70: state = 34; last = pos; kind = .sym
        case 0x7b: state = 35; last = pos; kind = .braceO
        case 0x7c: state = 36; last = pos; kind = .union
        case 0x7d: state = 37; last = pos; kind = .braceC
        default: break loop
        }
      case 1: // invalid.
        switch byte {
        case 0x0...0x8, 0xb...0x1f, 0x21, 0x23, 0x2a...0x2c, 0x5c, 0x60, 0x7e...0xff: state = 1; last = pos; kind = .invalid
        default: break loop
        }
      case 2: // tabs.
        switch byte {
        case 0x9: state = 2; last = pos; kind = .tabs
        default: break loop
        }
      case 3: // newline.
        break loop
      case 4: // spaces.
        switch byte {
        case 0x20: state = 4; last = pos; kind = .spaces
        default: break loop
        }
      case 5: // main pre-match.
        switch byte {
        case 0x20, 0x21, 0x23...0x5b, 0x5d...0x7e: state = 5
        case 0x22: state = 147; last = pos; kind = .stringDQ
        case 0x5c: state = 148
        case 0xc2: state = 149
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 150
        case 0xcd: state = 151
        case 0xce: state = 152
        case 0xd4: state = 153
        case 0xd5: state = 154
        case 0xd6: state = 155
        case 0xd7: state = 156
        case 0xd8: state = 157
        case 0xdb: state = 158
        case 0xdc: state = 159
        case 0xdd: state = 160
        case 0xde: state = 161
        case 0xdf: state = 162
        case 0xe0: state = 163
        case 0xe1: state = 164
        case 0xe2: state = 165
        case 0xe3: state = 166
        case 0xe4: state = 167
        case 0xe5...0xe8, 0xeb, 0xec: state = 168
        case 0xe9: state = 169
        case 0xea: state = 170
        case 0xed: state = 171
        case 0xef: state = 172
        case 0xf0: state = 173
        case 0xf3: state = 174
        default: break loop
        }
      case 6: // bling.
        break loop
      case 7: // sig.
        break loop
      case 8: // intersection.
        break loop
      case 9: // main pre-match.
        switch byte {
        case 0x20...0x26, 0x28...0x5b, 0x5d...0x7e: state = 9
        case 0x27: state = 194; last = pos; kind = .stringSQ
        case 0x5c: state = 195
        case 0xc2...0xdf: state = 196
        case 0xe0: state = 197
        case 0xe1: state = 198
        case 0xe2...0xec: state = 199
        case 0xed: state = 200
        case 0xef: state = 201
        case 0xf0: state = 202
        case 0xf3: state = 203
        default: break loop
        }
      case 10: // parenO.
        break loop
      case 11: // parenC.
        break loop
      case 12: // dash.
        switch byte {
        case 0x30: state = 15; last = pos; kind = .int
        case 0x31...0x39: state = 16; last = pos; kind = .int
        default: break loop
        }
      case 13: // call.
        break loop
      case 14: // slash.
        switch byte {
        case 0x2f: state = 38; last = pos; kind = .comment
        default: break loop
        }
      case 15: // int.
        switch byte {
        case 0x2e: state = 90; last = pos; kind = .flt
        case 0x30...0x39: state = 16; last = pos; kind = .int
        case 0x5f: state = 91
        case 0x62: state = 94
        case 0x64: state = 95
        case 0x6f: state = 96
        case 0x71: state = 97
        case 0x78: state = 98
        default: break loop
        }
      case 16: // int.
        switch byte {
        case 0x2e: state = 90; last = pos; kind = .flt
        case 0x30...0x39: state = 16; last = pos; kind = .int
        case 0x5f: state = 91
        default: break loop
        }
      case 17: // ann.
        switch byte {
        case 0x3a: state = 141; last = pos; kind = .typeVar
        case 0x3f: state = 142; last = pos; kind = .where_
        default: break loop
        }
      case 18: // semicolon.
        break loop
      case 19: // angleO.
        break loop
      case 20: // bind.
        switch byte {
        case 0x3a: state = 355; last = pos; kind = .typeAlias
        default: break loop
        }
      case 21: // angleC.
        break loop
      case 22: // case.
        break loop
      case 23: // acc.
        switch byte {
        case 0x3f: state = 193; last = pos; kind = .tagTest
        default: break loop
        }
      case 24: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 25: // brackO.
        break loop
      case 26: // brackC.
        break loop
      case 27: // caret.
        break loop
      case 28: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 39; last = pos; kind = .sym
        case 0x6e: state = 272; last = pos; kind = .sym
        default: break loop
        }
      case 29: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 39; last = pos; kind = .sym
        case 0x6e: state = 101; last = pos; kind = .fn
        default: break loop
        }
      case 30: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x7a: state = 39; last = pos; kind = .sym
        case 0x6f: state = 175; last = pos; kind = .sym
        default: break loop
        }
      case 31: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x65, 0x67...0x6d, 0x6f...0x7a: state = 39; last = pos; kind = .sym
        case 0x66: state = 40; last = pos; kind = .if_
        case 0x6e: state = 41; last = pos; kind = .in_
        default: break loop
        }
      case 32: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x62...0x64, 0x66...0x7a: state = 39; last = pos; kind = .sym
        case 0x61: state = 92; last = pos; kind = .sym
        case 0x65: state = 93; last = pos; kind = .sym
        default: break loop
        }
      case 33: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x71, 0x73...0x7a: state = 39; last = pos; kind = .sym
        case 0x72: state = 205; last = pos; kind = .or
        default: break loop
        }
      case 34: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x74, 0x76...0x7a: state = 39; last = pos; kind = .sym
        case 0x6f: state = 235; last = pos; kind = .sym
        case 0x75: state = 236; last = pos; kind = .sym
        default: break loop
        }
      case 35: // braceO.
        break loop
      case 36: // union.
        break loop
      case 37: // braceC.
        break loop
      case 38: // comment.
        switch byte {
        case 0x20...0x7e: state = 42; last = pos; kind = .comment
        case 0xc2: state = 43
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 44
        case 0xcd: state = 45
        case 0xce: state = 46
        case 0xd4: state = 47
        case 0xd5: state = 48
        case 0xd6: state = 49
        case 0xd7: state = 50
        case 0xd8: state = 51
        case 0xdb: state = 52
        case 0xdc: state = 53
        case 0xdd: state = 54
        case 0xde: state = 55
        case 0xdf: state = 56
        case 0xe0: state = 57
        case 0xe1: state = 58
        case 0xe2: state = 59
        case 0xe3: state = 60
        case 0xe4: state = 61
        case 0xe5...0xe8, 0xeb, 0xec: state = 62
        case 0xe9: state = 63
        case 0xea: state = 64
        case 0xed: state = 65
        case 0xef: state = 66
        case 0xf0: state = 67
        case 0xf3: state = 68
        default: break loop
        }
      case 39: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 40: // if.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 41: // in.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 42: // comment.
        switch byte {
        case 0x20...0x7e: state = 42; last = pos; kind = .comment
        case 0xc2: state = 43
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 44
        case 0xcd: state = 45
        case 0xce: state = 46
        case 0xd4: state = 47
        case 0xd5: state = 48
        case 0xd6: state = 49
        case 0xd7: state = 50
        case 0xd8: state = 51
        case 0xdb: state = 52
        case 0xdc: state = 53
        case 0xdd: state = 54
        case 0xde: state = 55
        case 0xdf: state = 56
        case 0xe0: state = 57
        case 0xe1: state = 58
        case 0xe2: state = 59
        case 0xe3: state = 60
        case 0xe4: state = 61
        case 0xe5...0xe8, 0xeb, 0xec: state = 62
        case 0xe9: state = 63
        case 0xea: state = 64
        case 0xed: state = 65
        case 0xef: state = 66
        case 0xf0: state = 67
        case 0xf3: state = 68
        default: break loop
        }
      case 43: // main post-match.
        switch byte {
        case 0xa0...0xac, 0xae...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 44: // main post-match.
        switch byte {
        case 0x80...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 45: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xba...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 46: // main post-match.
        switch byte {
        case 0x84...0x8a, 0x8c, 0x8e...0xa1, 0xa3...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 47: // main post-match.
        switch byte {
        case 0x80...0xaf, 0xb1...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 48: // main post-match.
        switch byte {
        case 0x80...0x96, 0x99...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 49: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0x8f, 0x91...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 50: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xaa, 0xaf...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 51: // main post-match.
        switch byte {
        case 0x86...0x9b, 0x9e...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 52: // main post-match.
        switch byte {
        case 0x80...0x9c, 0x9e...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 53: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 54: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 55: // main post-match.
        switch byte {
        case 0x80...0xb1: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 56: // main post-match.
        switch byte {
        case 0x80...0xba, 0xbd...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 57: // main post-match.
        switch byte {
        case 0xa0: state = 206
        case 0xa1: state = 207
        case 0xa2: state = 208
        case 0xa3: state = 209
        case 0xa4, 0xa5, 0xbc: state = 44
        case 0xa6: state = 210
        case 0xa7: state = 211
        case 0xa8: state = 212
        case 0xa9: state = 213
        case 0xaa: state = 214
        case 0xab: state = 215
        case 0xac: state = 216
        case 0xad: state = 217
        case 0xae: state = 218
        case 0xaf: state = 219
        case 0xb0: state = 220
        case 0xb1: state = 221
        case 0xb2: state = 222
        case 0xb3: state = 223
        case 0xb4: state = 224
        case 0xb5: state = 225
        case 0xb6: state = 226
        case 0xb7: state = 227
        case 0xb8: state = 228
        case 0xb9: state = 229
        case 0xba: state = 230
        case 0xbb: state = 231
        case 0xbd: state = 232
        case 0xbe: state = 233
        case 0xbf: state = 234
        default: break loop
        }
      case 58: // main post-match.
        switch byte {
        case 0x80...0x82, 0x84...0x88, 0x90...0x99, 0x9e, 0xac, 0xae, 0xb4...0xb6, 0xb8...0xbb: state = 44
        case 0x83: state = 107
        case 0x89: state = 108
        case 0x8a: state = 109
        case 0x8b: state = 110
        case 0x8c: state = 111
        case 0x8d: state = 112
        case 0x8e: state = 113
        case 0x8f: state = 114
        case 0x9a: state = 115
        case 0x9b, 0xa1: state = 116
        case 0x9c: state = 117
        case 0x9d: state = 118
        case 0x9f: state = 119
        case 0xa0: state = 120
        case 0xa2: state = 121
        case 0xa3: state = 122
        case 0xa4: state = 123
        case 0xa5: state = 124
        case 0xa6: state = 125
        case 0xa7: state = 126
        case 0xa8: state = 127
        case 0xa9: state = 128
        case 0xaa: state = 129
        case 0xad: state = 130
        case 0xaf: state = 131
        case 0xb0: state = 132
        case 0xb1: state = 133
        case 0xb2: state = 134
        case 0xb3: state = 135
        case 0xb7: state = 136
        case 0xbc: state = 137
        case 0xbd: state = 138
        case 0xbe: state = 139
        case 0xbf: state = 140
        default: break loop
        }
      case 59: // main post-match.
        switch byte {
        case 0x80: state = 69
        case 0x81: state = 70
        case 0x82: state = 71
        case 0x83: state = 72
        case 0x84, 0x85, 0x87...0x8f, 0x92...0xac, 0xb2, 0xb8, 0xbc...0xbe: state = 44
        case 0x86: state = 73
        case 0x90: state = 74
        case 0x91: state = 75
        case 0xad: state = 76
        case 0xae: state = 77
        case 0xaf: state = 78
        case 0xb0: state = 79
        case 0xb1: state = 80
        case 0xb3: state = 81
        case 0xb4: state = 82
        case 0xb5: state = 83
        case 0xb6: state = 84
        case 0xb7: state = 85
        case 0xb9: state = 86
        case 0xba: state = 87
        case 0xbb: state = 88
        case 0xbf: state = 89
        default: break loop
        }
      case 60: // main post-match.
        switch byte {
        case 0x80, 0x83, 0x85, 0x89, 0x8a, 0x8c...0xbf: state = 44
        case 0x81: state = 102
        case 0x82: state = 48
        case 0x84: state = 103
        case 0x86: state = 104
        case 0x87: state = 105
        case 0x88: state = 80
        case 0x8b: state = 106
        default: break loop
        }
      case 61: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb7...0xbf: state = 44
        case 0xb6: state = 122
        default: break loop
        }
      case 62: // main post-match.
        switch byte {
        case 0x80...0xbf: state = 44
        default: break loop
        }
      case 63: // main post-match.
        switch byte {
        case 0x80...0xbe: state = 44
        case 0xbf: state = 204
        default: break loop
        }
      case 64: // main post-match.
        switch byte {
        case 0x80...0x91, 0x94...0x97, 0x99, 0x9a, 0x9c, 0x9d, 0xa2, 0xa4, 0xa6, 0xaa, 0xae, 0xb0...0xbf: state = 44
        case 0x92: state = 177
        case 0x93: state = 178
        case 0x98: state = 179
        case 0x9b, 0xa1: state = 180
        case 0x9e: state = 181
        case 0x9f: state = 182
        case 0xa0: state = 183
        case 0xa3: state = 184
        case 0xa5: state = 185
        case 0xa7: state = 186
        case 0xa8: state = 187
        case 0xa9: state = 188
        case 0xab: state = 189
        case 0xac: state = 190
        case 0xad: state = 191
        case 0xaf: state = 192
        default: break loop
        }
      case 65: // main post-match.
        switch byte {
        case 0x80...0x9d: state = 44
        case 0x9e: state = 105
        case 0x9f: state = 146
        default: break loop
        }
      case 66: // main post-match.
        switch byte {
        case 0xa4...0xa8, 0xaa, 0xae, 0xb0...0xb4, 0xba, 0xbd: state = 44
        case 0xa9: state = 344
        case 0xab: state = 345
        case 0xac: state = 346
        case 0xad: state = 347
        case 0xaf: state = 348
        case 0xb5: state = 349
        case 0xb6: state = 350
        case 0xb7: state = 351
        case 0xb8: state = 113
        case 0xb9: state = 352
        case 0xbb: state = 353
        case 0xbc: state = 102
        case 0xbe: state = 106
        case 0xbf: state = 354
        default: break loop
        }
      case 67: // main post-match.
        switch byte {
        case 0x90: state = 404
        case 0x91: state = 405
        case 0x92: state = 406
        case 0x93: state = 407
        case 0x94: state = 408
        case 0x96: state = 409
        case 0x97, 0xa0...0xa9, 0xad: state = 62
        case 0x98: state = 410
        case 0x9b: state = 411
        case 0x9d: state = 412
        case 0x9e: state = 413
        case 0x9f: state = 414
        case 0xaa: state = 415
        case 0xab: state = 416
        case 0xac: state = 417
        case 0xae: state = 418
        case 0xaf: state = 419
        default: break loop
        }
      case 68: // main post-match.
        switch byte {
        case 0xa0: state = 143
        default: break loop
        }
      case 69: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xa9, 0xaf...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 70: // main post-match.
        switch byte {
        case 0x80...0x9f, 0xb0, 0xb1, 0xb4...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 71: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9c, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 72: // main post-match.
        switch byte {
        case 0x90...0xb0: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 73: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 74: // main post-match.
        switch byte {
        case 0x80...0xa6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 75: // main post-match.
        switch byte {
        case 0x80...0x8a, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 76: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xb6...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 77: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 78: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 79: // main post-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 80: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 81: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xb9...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 82: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xa7, 0xad, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 83: // main post-match.
        switch byte {
        case 0x80...0xa7, 0xaf, 0xb0, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 84: // main post-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xb6, 0xb8...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 85: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88...0x8e, 0x90...0x96, 0x98...0x9e, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 86: // main post-match.
        switch byte {
        case 0x80...0x8e: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 87: // main post-match.
        switch byte {
        case 0x80...0x99, 0x9b...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 88: // main post-match.
        switch byte {
        case 0x80...0xb3: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 89: // main post-match.
        switch byte {
        case 0x80...0x95, 0xb0...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 90: // flt.
        switch byte {
        case 0x30...0x39: state = 238; last = pos; kind = .flt
        default: break loop
        }
      case 91: // main post-match.
        switch byte {
        case 0x30...0x39: state = 521; last = pos; kind = .int
        default: break loop
        }
      case 92: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 39; last = pos; kind = .sym
        case 0x74: state = 100; last = pos; kind = .sym
        default: break loop
        }
      case 93: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 39; last = pos; kind = .sym
        case 0x74: state = 665; last = pos; kind = .sym
        default: break loop
        }
      case 94: // main post-match.
        switch byte {
        case 0x30, 0x31: state = 394; last = pos; kind = .intBin
        default: break loop
        }
      case 95: // main post-match.
        switch byte {
        case 0x30...0x39: state = 481; last = pos; kind = .intDec
        default: break loop
        }
      case 96: // main post-match.
        switch byte {
        case 0x30...0x37: state = 377; last = pos; kind = .intOct
        default: break loop
        }
      case 97: // main post-match.
        switch byte {
        case 0x30...0x33: state = 99; last = pos; kind = .intQuat
        default: break loop
        }
      case 98: // main post-match.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 656; last = pos; kind = .intHex
        default: break loop
        }
      case 99: // intQuat.
        switch byte {
        case 0x30...0x33: state = 99; last = pos; kind = .intQuat
        case 0x5f: state = 145
        default: break loop
        }
      case 100: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61, 0x62, 0x64...0x7a: state = 39; last = pos; kind = .sym
        case 0x63: state = 144; last = pos; kind = .sym
        default: break loop
        }
      case 101: // fn.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 102: // main post-match.
        switch byte {
        case 0x81...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 103: // main post-match.
        switch byte {
        case 0x85...0xaf, 0xb1...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 104: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0xba: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 105: // main post-match.
        switch byte {
        case 0x80...0xa3, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 106: // main post-match.
        switch byte {
        case 0x80...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 107: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87, 0x8d, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 108: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x96, 0x98, 0x9a...0x9d, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 109: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0xb0, 0xb2...0xb5, 0xb8...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 110: // main post-match.
        switch byte {
        case 0x80, 0x82...0x85, 0x88...0x96, 0x98...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 111: // main post-match.
        switch byte {
        case 0x80...0x90, 0x92...0x95, 0x98...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 112: // main post-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xbc: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 113: // main post-match.
        switch byte {
        case 0x80...0x99, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 114: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 115: // main post-match.
        switch byte {
        case 0x80...0x9c, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 116: // main post-match.
        switch byte {
        case 0x80...0xb8: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 117: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x94, 0xa0...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 118: // main post-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xac, 0xae...0xb0, 0xb2, 0xb3: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 119: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 120: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 121: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 122: // main post-match.
        switch byte {
        case 0x80...0xb5: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 123: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xab, 0xb0...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 124: // main post-match.
        switch byte {
        case 0x80, 0x84...0xad, 0xb0...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 125: // main post-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 126: // main post-match.
        switch byte {
        case 0x80...0x89, 0x90...0x9a, 0x9e...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 127: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9e...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 128: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbc, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 129: // main post-match.
        switch byte {
        case 0x80...0x89, 0x90...0x99, 0xa0...0xad, 0xb0...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 130: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbc: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 131: // main post-match.
        switch byte {
        case 0x80...0xb3, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 132: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xbb...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 133: // main post-match.
        switch byte {
        case 0x80...0x89, 0x8d...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 134: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90...0xba, 0xbd...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 135: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 136: // main post-match.
        switch byte {
        case 0x80...0xb9, 0xbb...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 137: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0x9d, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 138: // main post-match.
        switch byte {
        case 0x80...0x85, 0x88...0x8d, 0x90...0x97, 0x99, 0x9b, 0x9d, 0x9f...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 139: // main post-match.
        switch byte {
        case 0x80...0xb4, 0xb6...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 140: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x93, 0x96...0x9b, 0x9d...0xaf, 0xb2...0xb4, 0xb6...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 141: // typeVar.
        break loop
      case 142: // where.
        break loop
      case 143: // main post-match.
        switch byte {
        case 0x84...0x86: state = 44
        case 0x87: state = 204
        default: break loop
        }
      case 144: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x67, 0x69...0x7a: state = 39; last = pos; kind = .sym
        case 0x68: state = 237; last = pos; kind = .match
        default: break loop
        }
      case 145: // main post-match.
        switch byte {
        case 0x30...0x33: state = 255; last = pos; kind = .intQuat
        default: break loop
        }
      case 146: // main post-match.
        switch byte {
        case 0x80...0x86, 0x8b...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 147: // stringDQ.
        break loop
      case 148: // main pre-match.
        switch byte {
        case 0x20...0x7e: state = 5
        case 0xc2: state = 149
        case 0xc3...0xcc, 0xcf...0xd3, 0xd9, 0xda: state = 150
        case 0xcd: state = 151
        case 0xce: state = 152
        case 0xd4: state = 153
        case 0xd5: state = 154
        case 0xd6: state = 155
        case 0xd7: state = 156
        case 0xd8: state = 157
        case 0xdb: state = 158
        case 0xdc: state = 159
        case 0xdd: state = 160
        case 0xde: state = 161
        case 0xdf: state = 162
        case 0xe0: state = 163
        case 0xe1: state = 164
        case 0xe2: state = 165
        case 0xe3: state = 166
        case 0xe4: state = 167
        case 0xe5...0xe8, 0xeb, 0xec: state = 168
        case 0xe9: state = 169
        case 0xea: state = 170
        case 0xed: state = 171
        case 0xef: state = 172
        case 0xf0: state = 173
        case 0xf3: state = 174
        default: break loop
        }
      case 149: // main pre-match.
        switch byte {
        case 0xa0...0xac, 0xae...0xbf: state = 5
        default: break loop
        }
      case 150: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 5
        default: break loop
        }
      case 151: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xba...0xbf: state = 5
        default: break loop
        }
      case 152: // main pre-match.
        switch byte {
        case 0x84...0x8a, 0x8c, 0x8e...0xa1, 0xa3...0xbf: state = 5
        default: break loop
        }
      case 153: // main pre-match.
        switch byte {
        case 0x80...0xaf, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 154: // main pre-match.
        switch byte {
        case 0x80...0x96, 0x99...0xbf: state = 5
        default: break loop
        }
      case 155: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0x8f, 0x91...0xbf: state = 5
        default: break loop
        }
      case 156: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xaa, 0xaf...0xb4: state = 5
        default: break loop
        }
      case 157: // main pre-match.
        switch byte {
        case 0x86...0x9b, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 158: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 159: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0xbf: state = 5
        default: break loop
        }
      case 160: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x8d...0xbf: state = 5
        default: break loop
        }
      case 161: // main pre-match.
        switch byte {
        case 0x80...0xb1: state = 5
        default: break loop
        }
      case 162: // main pre-match.
        switch byte {
        case 0x80...0xba, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 163: // main pre-match.
        switch byte {
        case 0xa0: state = 482
        case 0xa1: state = 483
        case 0xa2: state = 484
        case 0xa3: state = 485
        case 0xa4, 0xa5, 0xbc: state = 150
        case 0xa6: state = 486
        case 0xa7: state = 487
        case 0xa8: state = 488
        case 0xa9: state = 489
        case 0xaa: state = 490
        case 0xab: state = 491
        case 0xac: state = 492
        case 0xad: state = 493
        case 0xae: state = 494
        case 0xaf: state = 495
        case 0xb0: state = 496
        case 0xb1: state = 497
        case 0xb2: state = 498
        case 0xb3: state = 499
        case 0xb4: state = 500
        case 0xb5: state = 501
        case 0xb6: state = 502
        case 0xb7: state = 503
        case 0xb8: state = 504
        case 0xb9: state = 505
        case 0xba: state = 506
        case 0xbb: state = 507
        case 0xbd: state = 508
        case 0xbe: state = 509
        case 0xbf: state = 510
        default: break loop
        }
      case 164: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x84...0x88, 0x90...0x99, 0x9e, 0xac, 0xae, 0xb4...0xb6, 0xb8...0xbb: state = 150
        case 0x83: state = 451
        case 0x89: state = 452
        case 0x8a: state = 453
        case 0x8b: state = 454
        case 0x8c: state = 455
        case 0x8d: state = 456
        case 0x8e: state = 426
        case 0x8f: state = 457
        case 0x9a: state = 297
        case 0x9b, 0xa1: state = 395
        case 0x9c: state = 458
        case 0x9d: state = 459
        case 0x9f: state = 460
        case 0xa0: state = 461
        case 0xa2: state = 462
        case 0xa3: state = 276
        case 0xa4: state = 463
        case 0xa5: state = 464
        case 0xa6: state = 434
        case 0xa7: state = 465
        case 0xa8: state = 466
        case 0xa9: state = 467
        case 0xaa: state = 468
        case 0xad: state = 469
        case 0xaf: state = 470
        case 0xb0: state = 471
        case 0xb1: state = 472
        case 0xb2: state = 473
        case 0xb3: state = 474
        case 0xb7: state = 475
        case 0xbc: state = 476
        case 0xbd: state = 477
        case 0xbe: state = 478
        case 0xbf: state = 479
        default: break loop
        }
      case 165: // main pre-match.
        switch byte {
        case 0x80: state = 356
        case 0x81: state = 357
        case 0x82: state = 358
        case 0x83: state = 359
        case 0x84, 0x85, 0x87...0x8f, 0x92...0xac, 0xb2, 0xb8, 0xbc...0xbe: state = 150
        case 0x86: state = 360
        case 0x90: state = 361
        case 0x91: state = 362
        case 0xad: state = 363
        case 0xae: state = 364
        case 0xaf: state = 365
        case 0xb0: state = 366
        case 0xb1: state = 367
        case 0xb3: state = 368
        case 0xb4: state = 369
        case 0xb5: state = 370
        case 0xb6: state = 371
        case 0xb7: state = 372
        case 0xb9: state = 373
        case 0xba: state = 374
        case 0xbb: state = 375
        case 0xbf: state = 376
        default: break loop
        }
      case 166: // main pre-match.
        switch byte {
        case 0x80, 0x83, 0x85, 0x89, 0x8a, 0x8c...0xbf: state = 150
        case 0x81: state = 429
        case 0x82: state = 154
        case 0x84: state = 557
        case 0x86: state = 558
        case 0x87: state = 273
        case 0x88: state = 367
        case 0x8b: state = 430
        default: break loop
        }
      case 167: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb7...0xbf: state = 150
        case 0xb6: state = 276
        default: break loop
        }
      case 168: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 150
        default: break loop
        }
      case 169: // main pre-match.
        switch byte {
        case 0x80...0xbe: state = 150
        case 0xbf: state = 275
        default: break loop
        }
      case 170: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x94...0x97, 0x99, 0x9a, 0x9c, 0x9d, 0xa2, 0xa4, 0xa6, 0xaa, 0xae, 0xb0...0xbf: state = 150
        case 0x92: state = 239
        case 0x93: state = 240
        case 0x98: state = 241
        case 0x9b, 0xa1: state = 242
        case 0x9e: state = 243
        case 0x9f: state = 244
        case 0xa0: state = 245
        case 0xa3: state = 246
        case 0xa5: state = 247
        case 0xa7: state = 248
        case 0xa8: state = 249
        case 0xa9: state = 250
        case 0xab: state = 251
        case 0xac: state = 252
        case 0xad: state = 253
        case 0xaf: state = 254
        default: break loop
        }
      case 171: // main pre-match.
        switch byte {
        case 0x80...0x9d: state = 150
        case 0x9e: state = 273
        case 0x9f: state = 274
        default: break loop
        }
      case 172: // main pre-match.
        switch byte {
        case 0xa4...0xa8, 0xaa, 0xae, 0xb0...0xb4, 0xba, 0xbd: state = 150
        case 0xa9: state = 420
        case 0xab: state = 327
        case 0xac: state = 421
        case 0xad: state = 422
        case 0xaf: state = 423
        case 0xb5: state = 424
        case 0xb6: state = 314
        case 0xb7: state = 425
        case 0xb8: state = 426
        case 0xb9: state = 427
        case 0xbb: state = 428
        case 0xbc: state = 429
        case 0xbe: state = 430
        case 0xbf: state = 431
        default: break loop
        }
      case 173: // main pre-match.
        switch byte {
        case 0x90: state = 256
        case 0x91: state = 257
        case 0x92: state = 258
        case 0x93: state = 259
        case 0x94: state = 260
        case 0x96: state = 261
        case 0x97, 0xa0...0xa9, 0xad: state = 168
        case 0x98: state = 262
        case 0x9b: state = 263
        case 0x9d: state = 264
        case 0x9e: state = 265
        case 0x9f: state = 266
        case 0xaa: state = 267
        case 0xab: state = 268
        case 0xac: state = 269
        case 0xae: state = 270
        case 0xaf: state = 271
        default: break loop
        }
      case 174: // main pre-match.
        switch byte {
        case 0xa0: state = 176
        default: break loop
        }
      case 175: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x72, 0x74...0x7a: state = 39; last = pos; kind = .sym
        case 0x73: state = 450; last = pos; kind = .sym
        default: break loop
        }
      case 176: // main pre-match.
        switch byte {
        case 0x84...0x86: state = 150
        case 0x87: state = 275
        default: break loop
        }
      case 177: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 178: // main post-match.
        switch byte {
        case 0x80...0x86, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 179: // main post-match.
        switch byte {
        case 0x80...0xab: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 180: // main post-match.
        switch byte {
        case 0x80...0xb7: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 181: // main post-match.
        switch byte {
        case 0x80...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 182: // main post-match.
        switch byte {
        case 0xb7...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 183: // main post-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 184: // main post-match.
        switch byte {
        case 0x80...0x85, 0x8e...0x99, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 185: // main post-match.
        switch byte {
        case 0x80...0x93, 0x9f...0xbc: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 186: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x8f...0x99, 0x9e...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 187: // main post-match.
        switch byte {
        case 0x80...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 188: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0x9c...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 189: // main post-match.
        switch byte {
        case 0x80...0x82, 0x9b...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 190: // main post-match.
        switch byte {
        case 0x81...0x86, 0x89...0x8e, 0x91...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 191: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 192: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 193: // tagTest.
        break loop
      case 194: // stringSQ.
        break loop
      case 195: // main pre-match.
        switch byte {
        case 0x20...0x7e: state = 9
        case 0xc2...0xdf: state = 196
        case 0xe0: state = 197
        case 0xe1: state = 198
        case 0xe2...0xec: state = 199
        case 0xed: state = 200
        case 0xef: state = 201
        case 0xf0: state = 202
        case 0xf3: state = 203
        default: break loop
        }
      case 196: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 9
        default: break loop
        }
      case 197: // main pre-match.
        switch byte {
        case 0xa0...0xbf: state = 196
        default: break loop
        }
      case 198: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xac...0xbf: state = 196
        default: break loop
        }
      case 199: // main pre-match.
        switch byte {
        case 0x80...0xbf: state = 196
        default: break loop
        }
      case 200: // main pre-match.
        switch byte {
        case 0x80...0x9f: state = 196
        default: break loop
        }
      case 201: // main pre-match.
        switch byte {
        case 0xa4...0xbf: state = 196
        default: break loop
        }
      case 202: // main pre-match.
        switch byte {
        case 0x90: state = 379
        case 0x91: state = 380
        case 0x92: state = 381
        case 0x93: state = 382
        case 0x94: state = 383
        case 0x96: state = 384
        case 0x97, 0xa0...0xad: state = 199
        case 0x98: state = 385
        case 0x9b: state = 386
        case 0x9d: state = 387
        case 0x9e: state = 388
        case 0x9f: state = 389
        case 0xae: state = 390
        case 0xaf: state = 391
        default: break loop
        }
      case 203: // main pre-match.
        switch byte {
        case 0xa0: state = 433
        default: break loop
        }
      case 204: // main post-match.
        switch byte {
        case 0x80...0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 205: // or.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 206: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 207: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9e, 0xa0...0xaa: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 208: // main post-match.
        switch byte {
        case 0xa0...0xb4, 0xb6...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 209: // main post-match.
        switch byte {
        case 0x93...0xa1, 0xa3...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 210: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb6...0xb9, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 211: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8e, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 212: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8a, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5, 0xb6, 0xb8, 0xb9, 0xbc, 0xbe, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 213: // main post-match.
        switch byte {
        case 0x80...0x82, 0x87, 0x88, 0x8b...0x8d, 0x91, 0x99...0x9c, 0x9e, 0xa6...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 214: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8d, 0x8f...0x91, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 215: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87...0x89, 0x8b...0x8d, 0x90, 0xa0...0xa3, 0xa6...0xb1, 0xb9...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 216: // main post-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 217: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x96, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xb7: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 218: // main post-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x8a, 0x8e...0x90, 0x92...0x95, 0x99, 0x9a, 0x9c, 0x9e, 0x9f, 0xa3, 0xa4, 0xa8...0xaa, 0xae...0xb9, 0xbe, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 219: // main post-match.
        switch byte {
        case 0x80...0x82, 0x86...0x88, 0x8a...0x8d, 0x90, 0x97, 0xa6...0xba: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 220: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb9, 0xbd...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 221: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x98...0x9a, 0xa0...0xa3, 0xa6...0xaf, 0xb8...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 222: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 223: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x9e, 0xa0...0xa3, 0xa6...0xaf, 0xb1, 0xb2: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 224: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 225: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8f, 0x94...0xa3, 0xa6...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 226: // main post-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x96, 0x9a...0xb1, 0xb3...0xbb, 0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 227: // main post-match.
        switch byte {
        case 0x80...0x86, 0x8a, 0x8f...0x94, 0x96, 0x98...0x9f, 0xa6...0xaf, 0xb2...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 228: // main post-match.
        switch byte {
        case 0x81...0xba, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 229: // main post-match.
        switch byte {
        case 0x80...0x9b: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 230: // main post-match.
        switch byte {
        case 0x81, 0x82, 0x84, 0x87, 0x88, 0x8a, 0x8d, 0x94...0x97, 0x99...0x9f, 0xa1...0xa3, 0xa5, 0xa7, 0xaa, 0xab, 0xad...0xb9, 0xbb...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 231: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x88...0x8d, 0x90...0x99, 0x9c...0x9f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 232: // main post-match.
        switch byte {
        case 0x80...0x87, 0x89...0xac, 0xb1...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 233: // main post-match.
        switch byte {
        case 0x80...0x97, 0x99...0xbc, 0xbe, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 234: // main post-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x9a: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 235: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6b, 0x6d...0x7a: state = 39; last = pos; kind = .sym
        case 0x6c: state = 328; last = pos; kind = .sym
        default: break loop
        }
      case 236: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61, 0x63...0x7a: state = 39; last = pos; kind = .sym
        case 0x62: state = 538; last = pos; kind = .pub
        default: break loop
        }
      case 237: // match.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 238: // flt.
        switch byte {
        case 0x30...0x39: state = 238; last = pos; kind = .flt
        default: break loop
        }
      case 239: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x90...0xbf: state = 5
        default: break loop
        }
      case 240: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x90...0xbf: state = 5
        default: break loop
        }
      case 241: // main pre-match.
        switch byte {
        case 0x80...0xab: state = 5
        default: break loop
        }
      case 242: // main pre-match.
        switch byte {
        case 0x80...0xb7: state = 5
        default: break loop
        }
      case 243: // main pre-match.
        switch byte {
        case 0x80...0xb9: state = 5
        default: break loop
        }
      case 244: // main pre-match.
        switch byte {
        case 0xb7...0xbf: state = 5
        default: break loop
        }
      case 245: // main pre-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 246: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x8e...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 247: // main pre-match.
        switch byte {
        case 0x80...0x93, 0x9f...0xbc: state = 5
        default: break loop
        }
      case 248: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x8f...0x99, 0x9e...0xbe: state = 5
        default: break loop
        }
      case 249: // main pre-match.
        switch byte {
        case 0x80...0xb6: state = 5
        default: break loop
        }
      case 250: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0x9c...0xbf: state = 5
        default: break loop
        }
      case 251: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x9b...0xb6: state = 5
        default: break loop
        }
      case 252: // main pre-match.
        switch byte {
        case 0x81...0x86, 0x89...0x8e, 0x91...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 253: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 254: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 255: // intQuat.
        switch byte {
        case 0x30...0x33: state = 255; last = pos; kind = .intQuat
        case 0x5f: state = 145
        default: break loop
        }
      case 256: // main pre-match.
        switch byte {
        case 0x80: state = 291
        case 0x81: state = 292
        case 0x82, 0x85, 0x90, 0x91, 0x98...0x9b, 0xb0: state = 150
        case 0x83: state = 293
        case 0x84: state = 294
        case 0x86: state = 295
        case 0x87: state = 296
        case 0x8a: state = 297
        case 0x8b: state = 298
        case 0x8c: state = 299
        case 0x8d: state = 300
        case 0x8e: state = 301
        case 0x8f: state = 302
        case 0x92: state = 303
        case 0x93: state = 304
        case 0x94, 0xbc: state = 305
        case 0x95: state = 306
        case 0x9c: state = 249
        case 0x9d: state = 307
        case 0xa0: state = 308
        case 0xa1: state = 309
        case 0xa2: state = 310
        case 0xa3: state = 311
        case 0xa4: state = 312
        case 0xa6: state = 313
        case 0xa7: state = 314
        case 0xa8: state = 315
        case 0xa9: state = 316
        case 0xaa: state = 317
        case 0xab: state = 318
        case 0xac: state = 319
        case 0xad: state = 320
        case 0xae: state = 321
        case 0xb1: state = 322
        case 0xb2: state = 323
        case 0xb3: state = 324
        case 0xb4: state = 325
        case 0xb9: state = 326
        case 0xbd: state = 327
        default: break loop
        }
      case 257: // main pre-match.
        switch byte {
        case 0x80, 0x86, 0x90, 0x92, 0x98, 0xa8: state = 150
        case 0x81: state = 598
        case 0x82: state = 599
        case 0x83: state = 600
        case 0x84: state = 478
        case 0x85: state = 601
        case 0x87: state = 602
        case 0x88: state = 603
        case 0x8a: state = 604
        case 0x8b: state = 605
        case 0x8c: state = 606
        case 0x8d: state = 607
        case 0x91: state = 608
        case 0x93: state = 609
        case 0x96: state = 610
        case 0x97: state = 595
        case 0x99: state = 611
        case 0x9a: state = 242
        case 0x9b: state = 612
        case 0x9c: state = 613
        case 0xa0: state = 341
        case 0xa2: state = 614
        case 0xa3: state = 615
        case 0xa9: state = 616
        case 0xaa: state = 617
        case 0xab: state = 395
        case 0xb0: state = 618
        case 0xb1: state = 619
        case 0xb2: state = 620
        case 0xb4: state = 621
        case 0xb5: state = 622
        case 0xb6: state = 623
        case 0xbb: state = 624
        default: break loop
        }
      case 258: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90, 0x92...0x94: state = 150
        case 0x8e: state = 327
        case 0x91: state = 559
        case 0x95: state = 560
        default: break loop
        }
      case 259: // main pre-match.
        switch byte {
        case 0x80...0x8f: state = 150
        case 0x90: state = 378
        default: break loop
        }
      case 260: // main pre-match.
        switch byte {
        case 0x90...0x98: state = 150
        case 0x99: state = 392
        default: break loop
        }
      case 261: // main pre-match.
        switch byte {
        case 0xa0...0xa7, 0xac, 0xb9, 0xbc: state = 150
        case 0xa8: state = 395
        case 0xa9: state = 396
        case 0xab: state = 397
        case 0xad: state = 398
        case 0xae: state = 399
        case 0xba: state = 400
        case 0xbd: state = 401
        case 0xbe: state = 402
        case 0xbf: state = 403
        default: break loop
        }
      case 262: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xaa: state = 150
        case 0x9f: state = 161
        case 0xab: state = 323
        default: break loop
        }
      case 263: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x86...0x8a, 0xb0: state = 150
        case 0x84: state = 339
        case 0x85: state = 340
        case 0x8b: state = 341
        case 0xb1: state = 342
        case 0xb2: state = 343
        default: break loop
        }
      case 264: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x86, 0x88, 0x8c, 0x90, 0x96...0x99, 0x9b...0x9e, 0xa0...0xa9: state = 150
        case 0x83: state = 276
        case 0x84: state = 277
        case 0x85: state = 278
        case 0x87: state = 279
        case 0x89: state = 280
        case 0x8b: state = 281
        case 0x8d: state = 282
        case 0x91: state = 283
        case 0x92: state = 284
        case 0x93: state = 285
        case 0x94: state = 286
        case 0x95: state = 287
        case 0x9a: state = 288
        case 0x9f: state = 289
        case 0xaa: state = 290
        default: break loop
        }
      case 265: // main pre-match.
        switch byte {
        case 0x80: state = 330
        case 0xa0...0xa2, 0xa4: state = 150
        case 0xa3: state = 331
        case 0xa5: state = 332
        case 0xb1: state = 333
        case 0xb2: state = 334
        case 0xb8: state = 335
        case 0xb9: state = 336
        case 0xba: state = 337
        case 0xbb: state = 338
        default: break loop
        }
      case 266: // main pre-match.
        switch byte {
        case 0x80, 0x85: state = 434
        case 0x81, 0x8c...0x9a, 0x9c, 0x9e: state = 150
        case 0x82: state = 435
        case 0x83: state = 436
        case 0x84: state = 239
        case 0x86: state = 437
        case 0x87: state = 438
        case 0x88: state = 439
        case 0x89: state = 440
        case 0x9b: state = 441
        case 0x9d: state = 375
        case 0x9f: state = 442
        case 0xa0: state = 360
        case 0xa1: state = 443
        case 0xa2: state = 444
        case 0xa4: state = 445
        case 0xa5: state = 446
        case 0xa6: state = 447
        case 0xa7: state = 448
        case 0xa9: state = 449
        default: break loop
        }
      case 267: // main pre-match.
        switch byte {
        case 0x80...0x9a, 0x9c...0xbf: state = 150
        case 0x9b: state = 329
        default: break loop
        }
      case 268: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9d...0x9f, 0xa1...0xbf: state = 150
        case 0x9c: state = 334
        case 0xa0: state = 673
        default: break loop
        }
      case 269: // main pre-match.
        switch byte {
        case 0x80...0xb9, 0xbb...0xbf: state = 150
        case 0xba: state = 511
        default: break loop
        }
      case 270: // main pre-match.
        switch byte {
        case 0x80...0xae: state = 150
        case 0xaf: state = 522
        default: break loop
        }
      case 271: // main pre-match.
        switch byte {
        case 0xa0...0xa7: state = 150
        case 0xa8: state = 595
        default: break loop
        }
      case 272: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x63, 0x65...0x7a: state = 39; last = pos; kind = .sym
        case 0x64: state = 393; last = pos; kind = .and
        default: break loop
        }
      case 273: // main pre-match.
        switch byte {
        case 0x80...0xa3, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 274: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x8b...0xbb: state = 5
        default: break loop
        }
      case 275: // main pre-match.
        switch byte {
        case 0x80...0xaf: state = 5
        default: break loop
        }
      case 276: // main pre-match.
        switch byte {
        case 0x80...0xb5: state = 5
        default: break loop
        }
      case 277: // main pre-match.
        switch byte {
        case 0x80...0xa6, 0xa9...0xbf: state = 5
        default: break loop
        }
      case 278: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 279: // main pre-match.
        switch byte {
        case 0x80...0xa8: state = 5
        default: break loop
        }
      case 280: // main pre-match.
        switch byte {
        case 0x80...0x85: state = 5
        default: break loop
        }
      case 281: // main pre-match.
        switch byte {
        case 0xa0...0xb3: state = 5
        default: break loop
        }
      case 282: // main pre-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xb8: state = 5
        default: break loop
        }
      case 283: // main pre-match.
        switch byte {
        case 0x80...0x94, 0x96...0xbf: state = 5
        default: break loop
        }
      case 284: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0x9e, 0x9f, 0xa2, 0xa5, 0xa6, 0xa9...0xac, 0xae...0xb9, 0xbb, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 285: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0xbf: state = 5
        default: break loop
        }
      case 286: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87...0x8a, 0x8d...0x94, 0x96...0x9c, 0x9e...0xb9, 0xbb...0xbe: state = 5
        default: break loop
        }
      case 287: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x8a...0x90, 0x92...0xbf: state = 5
        default: break loop
        }
      case 288: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xa8...0xbf: state = 5
        default: break loop
        }
      case 289: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x8e...0xbf: state = 5
        default: break loop
        }
      case 290: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x9b...0x9f, 0xa1...0xaf: state = 5
        default: break loop
        }
      case 291: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x8d...0xa6, 0xa8...0xba, 0xbc, 0xbd, 0xbf: state = 5
        default: break loop
        }
      case 292: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9d: state = 5
        default: break loop
        }
      case 293: // main pre-match.
        switch byte {
        case 0x80...0xba: state = 5
        default: break loop
        }
      case 294: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x87...0xb3, 0xb7...0xbf: state = 5
        default: break loop
        }
      case 295: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9b, 0xa0: state = 5
        default: break loop
        }
      case 296: // main pre-match.
        switch byte {
        case 0x90...0xbd: state = 5
        default: break loop
        }
      case 297: // main pre-match.
        switch byte {
        case 0x80...0x9c, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 298: // main pre-match.
        switch byte {
        case 0x80...0x90, 0xa0...0xbb: state = 5
        default: break loop
        }
      case 299: // main pre-match.
        switch byte {
        case 0x80...0xa3, 0xad...0xbf: state = 5
        default: break loop
        }
      case 300: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xba: state = 5
        default: break loop
        }
      case 301: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0x9f...0xbf: state = 5
        default: break loop
        }
      case 302: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x88...0x95: state = 5
        default: break loop
        }
      case 303: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 304: // main pre-match.
        switch byte {
        case 0x80...0x93, 0x98...0xbb: state = 5
        default: break loop
        }
      case 305: // main pre-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 306: // main pre-match.
        switch byte {
        case 0x80...0xa3, 0xaf: state = 5
        default: break loop
        }
      case 307: // main pre-match.
        switch byte {
        case 0x80...0x95, 0xa0...0xa7: state = 5
        default: break loop
        }
      case 308: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x88, 0x8a...0xb5, 0xb7, 0xb8, 0xbc, 0xbf: state = 5
        default: break loop
        }
      case 309: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x97...0xbf: state = 5
        default: break loop
        }
      case 310: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa7...0xaf: state = 5
        default: break loop
        }
      case 311: // main pre-match.
        switch byte {
        case 0xa0...0xb2, 0xb4, 0xb5, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 312: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9f...0xb9, 0xbf: state = 5
        default: break loop
        }
      case 313: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 314: // main pre-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xbf: state = 5
        default: break loop
        }
      case 315: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85, 0x86, 0x8c...0x93, 0x95...0x97, 0x99...0xb5, 0xb8...0xba, 0xbf: state = 5
        default: break loop
        }
      case 316: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90...0x98, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 317: // main pre-match.
        switch byte {
        case 0x80...0x9f: state = 5
        default: break loop
        }
      case 318: // main pre-match.
        switch byte {
        case 0x80...0xa6, 0xab...0xb6: state = 5
        default: break loop
        }
      case 319: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb9...0xbf: state = 5
        default: break loop
        }
      case 320: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb2, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 321: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x99...0x9c, 0xa9...0xaf: state = 5
        default: break loop
        }
      case 322: // main pre-match.
        switch byte {
        case 0x80...0x88: state = 5
        default: break loop
        }
      case 323: // main pre-match.
        switch byte {
        case 0x80...0xb2: state = 5
        default: break loop
        }
      case 324: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xba...0xbf: state = 5
        default: break loop
        }
      case 325: // main pre-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 326: // main pre-match.
        switch byte {
        case 0xa0...0xbe: state = 5
        default: break loop
        }
      case 327: // main pre-match.
        switch byte {
        case 0x80...0x99: state = 5
        default: break loop
        }
      case 328: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x78, 0x7a: state = 39; last = pos; kind = .sym
        case 0x79: state = 625; last = pos; kind = .sym
        default: break loop
        }
      case 329: // main pre-match.
        switch byte {
        case 0x80...0x96: state = 5
        default: break loop
        }
      case 330: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88...0x98, 0x9b...0xa1, 0xa3, 0xa4, 0xa6...0xaa: state = 5
        default: break loop
        }
      case 331: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87...0x96: state = 5
        default: break loop
        }
      case 332: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0x99, 0x9e, 0x9f: state = 5
        default: break loop
        }
      case 333: // main pre-match.
        switch byte {
        case 0xb1...0xbf: state = 5
        default: break loop
        }
      case 334: // main pre-match.
        switch byte {
        case 0x80...0xb4: state = 5
        default: break loop
        }
      case 335: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x9f, 0xa1, 0xa2, 0xa4, 0xa7, 0xa9...0xb2, 0xb4...0xb7, 0xb9, 0xbb: state = 5
        default: break loop
        }
      case 336: // main pre-match.
        switch byte {
        case 0x82, 0x87, 0x89, 0x8b, 0x8d...0x8f, 0x91, 0x92, 0x94, 0x97, 0x99, 0x9b, 0x9d, 0x9f, 0xa1, 0xa2, 0xa4, 0xa7...0xaa, 0xac...0xb2, 0xb4...0xb7, 0xb9...0xbc, 0xbe: state = 5
        default: break loop
        }
      case 337: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8b...0x9b, 0xa1...0xa3, 0xa5...0xa9, 0xab...0xbb: state = 5
        default: break loop
        }
      case 338: // main pre-match.
        switch byte {
        case 0xb0, 0xb1: state = 5
        default: break loop
        }
      case 339: // main pre-match.
        switch byte {
        case 0x80...0x9e: state = 5
        default: break loop
        }
      case 340: // main pre-match.
        switch byte {
        case 0xb0...0xbf: state = 5
        default: break loop
        }
      case 341: // main pre-match.
        switch byte {
        case 0x80...0xbb: state = 5
        default: break loop
        }
      case 342: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbc: state = 5
        default: break loop
        }
      case 343: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90...0x99, 0x9c...0x9f: state = 5
        default: break loop
        }
      case 344: // main post-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 345: // main post-match.
        switch byte {
        case 0x80...0x99: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 346: // main post-match.
        switch byte {
        case 0x80...0x86, 0x93...0x97, 0x9d...0xb6, 0xb8...0xbc, 0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 347: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x83, 0x84, 0x86...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 348: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x93...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 349: // main post-match.
        switch byte {
        case 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 350: // main post-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 351: // main post-match.
        switch byte {
        case 0x80...0x87, 0xb0...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 352: // main post-match.
        switch byte {
        case 0x80...0x92, 0x94...0xa6, 0xa8...0xab, 0xb0...0xb4, 0xb6...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 353: // main post-match.
        switch byte {
        case 0x80...0xbc: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 354: // main post-match.
        switch byte {
        case 0x82...0x87, 0x8a...0x8f, 0x92...0x97, 0x9a...0x9c, 0xa0...0xa6, 0xa8...0xae, 0xbc, 0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 355: // typeAlias.
        break loop
      case 356: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xa9, 0xaf...0xbf: state = 5
        default: break loop
        }
      case 357: // main pre-match.
        switch byte {
        case 0x80...0x9f, 0xb0, 0xb1, 0xb4...0xbf: state = 5
        default: break loop
        }
      case 358: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9c, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 359: // main pre-match.
        switch byte {
        case 0x90...0xb0: state = 5
        default: break loop
        }
      case 360: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbf: state = 5
        default: break loop
        }
      case 361: // main pre-match.
        switch byte {
        case 0x80...0xa6: state = 5
        default: break loop
        }
      case 362: // main pre-match.
        switch byte {
        case 0x80...0x8a, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 363: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 364: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0xbf: state = 5
        default: break loop
        }
      case 365: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xbe: state = 5
        default: break loop
        }
      case 366: // main pre-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 367: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 368: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xb9...0xbf: state = 5
        default: break loop
        }
      case 369: // main pre-match.
        switch byte {
        case 0x80...0xa5, 0xa7, 0xad, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 370: // main pre-match.
        switch byte {
        case 0x80...0xa7, 0xaf, 0xb0, 0xbf: state = 5
        default: break loop
        }
      case 371: // main pre-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xa6, 0xa8...0xae, 0xb0...0xb6, 0xb8...0xbe: state = 5
        default: break loop
        }
      case 372: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88...0x8e, 0x90...0x96, 0x98...0x9e, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 373: // main pre-match.
        switch byte {
        case 0x80...0x8e: state = 5
        default: break loop
        }
      case 374: // main pre-match.
        switch byte {
        case 0x80...0x99, 0x9b...0xbf: state = 5
        default: break loop
        }
      case 375: // main pre-match.
        switch byte {
        case 0x80...0xb3: state = 5
        default: break loop
        }
      case 376: // main pre-match.
        switch byte {
        case 0x80...0x95, 0xb0...0xbb: state = 5
        default: break loop
        }
      case 377: // intOct.
        switch byte {
        case 0x30...0x37: state = 377; last = pos; kind = .intOct
        case 0x5f: state = 672
        default: break loop
        }
      case 378: // main pre-match.
        switch byte {
        case 0x80...0xae: state = 5
        default: break loop
        }
      case 379: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x8a...0x95, 0x98...0x9d, 0xa0...0xa4, 0xa6...0xae, 0xb0...0xb4, 0xb9, 0xbc, 0xbd: state = 196
        default: break loop
        }
      case 380: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x93, 0x96...0x9c, 0xa0, 0xa2, 0xa3, 0xa8...0xab, 0xb0...0xb2, 0xb4...0xb6, 0xbb: state = 196
        default: break loop
        }
      case 381: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x95: state = 196
        default: break loop
        }
      case 382: // main pre-match.
        switch byte {
        case 0x80...0x90: state = 196
        default: break loop
        }
      case 383: // main pre-match.
        switch byte {
        case 0x90...0x99: state = 196
        default: break loop
        }
      case 384: // main pre-match.
        switch byte {
        case 0xa0...0xa9, 0xab...0xae, 0xb9, 0xba, 0xbc...0xbf: state = 196
        default: break loop
        }
      case 385: // main pre-match.
        switch byte {
        case 0x80...0xab: state = 196
        default: break loop
        }
      case 386: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0xb0...0xb2: state = 196
        default: break loop
        }
      case 387: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8b...0x8d, 0x90...0xaa: state = 196
        default: break loop
        }
      case 388: // main pre-match.
        switch byte {
        case 0x80, 0xa0...0xa5, 0xb1, 0xb2, 0xb8...0xbb: state = 196
        default: break loop
        }
      case 389: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8c...0xa2, 0xa4...0xa7, 0xa9: state = 196
        default: break loop
        }
      case 390: // main pre-match.
        switch byte {
        case 0x80...0xaf: state = 196
        default: break loop
        }
      case 391: // main pre-match.
        switch byte {
        case 0xa0...0xa8: state = 196
        default: break loop
        }
      case 392: // main pre-match.
        switch byte {
        case 0x80...0x86: state = 5
        default: break loop
        }
      case 393: // and.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 394: // intBin.
        switch byte {
        case 0x30, 0x31: state = 394; last = pos; kind = .intBin
        case 0x5f: state = 432
        default: break loop
        }
      case 395: // main pre-match.
        switch byte {
        case 0x80...0xb8: state = 5
        default: break loop
        }
      case 396: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xa9, 0xae, 0xaf: state = 5
        default: break loop
        }
      case 397: // main pre-match.
        switch byte {
        case 0x90...0xad, 0xb0...0xb5: state = 5
        default: break loop
        }
      case 398: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x90...0x99, 0x9b...0xa1, 0xa3...0xb7, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 399: // main pre-match.
        switch byte {
        case 0x80...0x8f: state = 5
        default: break loop
        }
      case 400: // main pre-match.
        switch byte {
        case 0x80...0x9a: state = 5
        default: break loop
        }
      case 401: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x90...0xbe: state = 5
        default: break loop
        }
      case 402: // main pre-match.
        switch byte {
        case 0x8f...0x9f: state = 5
        default: break loop
        }
      case 403: // main pre-match.
        switch byte {
        case 0xa0, 0xa1: state = 5
        default: break loop
        }
      case 404: // main post-match.
        switch byte {
        case 0x80: state = 561
        case 0x81: state = 562
        case 0x82, 0x85, 0x90, 0x91, 0x98...0x9b, 0xb0: state = 44
        case 0x83: state = 563
        case 0x84: state = 564
        case 0x86: state = 565
        case 0x87: state = 566
        case 0x8a: state = 115
        case 0x8b: state = 567
        case 0x8c: state = 568
        case 0x8d: state = 569
        case 0x8e: state = 570
        case 0x8f: state = 571
        case 0x92: state = 572
        case 0x93: state = 573
        case 0x94, 0xbc: state = 574
        case 0x95: state = 575
        case 0x9c: state = 187
        case 0x9d: state = 576
        case 0xa0: state = 577
        case 0xa1: state = 578
        case 0xa2: state = 579
        case 0xa3: state = 580
        case 0xa4: state = 581
        case 0xa6: state = 582
        case 0xa7: state = 350
        case 0xa8: state = 583
        case 0xa9: state = 584
        case 0xaa: state = 585
        case 0xab: state = 586
        case 0xac: state = 587
        case 0xad: state = 588
        case 0xae: state = 589
        case 0xb1: state = 590
        case 0xb2: state = 591
        case 0xb3: state = 592
        case 0xb4: state = 593
        case 0xb9: state = 594
        case 0xbd: state = 345
        default: break loop
        }
      case 405: // main post-match.
        switch byte {
        case 0x80, 0x86, 0x90, 0x92, 0x98, 0xa8: state = 44
        case 0x81: state = 626
        case 0x82: state = 627
        case 0x83: state = 628
        case 0x84: state = 139
        case 0x85: state = 629
        case 0x87: state = 630
        case 0x88: state = 631
        case 0x8a: state = 632
        case 0x8b: state = 633
        case 0x8c: state = 634
        case 0x8d: state = 635
        case 0x91: state = 636
        case 0x93: state = 637
        case 0x96: state = 638
        case 0x97: state = 596
        case 0x99: state = 639
        case 0x9a: state = 180
        case 0x9b: state = 640
        case 0x9c: state = 641
        case 0xa0: state = 642
        case 0xa2: state = 643
        case 0xa3: state = 644
        case 0xa9: state = 645
        case 0xaa: state = 646
        case 0xab: state = 116
        case 0xb0: state = 647
        case 0xb1: state = 648
        case 0xb2: state = 649
        case 0xb4: state = 650
        case 0xb5: state = 651
        case 0xb6: state = 652
        case 0xbb: state = 653
        default: break loop
        }
      case 406: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90, 0x92...0x94: state = 44
        case 0x8e: state = 345
        case 0x91: state = 555
        case 0x95: state = 556
        default: break loop
        }
      case 407: // main post-match.
        switch byte {
        case 0x80...0x8f: state = 44
        case 0x90: state = 540
        default: break loop
        }
      case 408: // main post-match.
        switch byte {
        case 0x90...0x98: state = 44
        case 0x99: state = 671
        default: break loop
        }
      case 409: // main post-match.
        switch byte {
        case 0xa0...0xa7, 0xac, 0xb9, 0xbc: state = 44
        case 0xa8: state = 116
        case 0xa9: state = 512
        case 0xab: state = 513
        case 0xad: state = 514
        case 0xae: state = 515
        case 0xba: state = 516
        case 0xbd: state = 517
        case 0xbe: state = 518
        case 0xbf: state = 519
        default: break loop
        }
      case 410: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xaa: state = 44
        case 0x9f: state = 55
        case 0xab: state = 591
        default: break loop
        }
      case 411: // main post-match.
        switch byte {
        case 0x80...0x83, 0x86...0x8a, 0xb0: state = 44
        case 0x84: state = 667
        case 0x85: state = 668
        case 0x8b: state = 642
        case 0xb1: state = 669
        case 0xb2: state = 670
        default: break loop
        }
      case 412: // main post-match.
        switch byte {
        case 0x80...0x82, 0x86, 0x88, 0x8c, 0x90, 0x96...0x99, 0x9b...0x9e, 0xa0...0xa9: state = 44
        case 0x83: state = 122
        case 0x84: state = 541
        case 0x85: state = 542
        case 0x87: state = 543
        case 0x89: state = 544
        case 0x8b: state = 545
        case 0x8d: state = 546
        case 0x91: state = 547
        case 0x92: state = 548
        case 0x93: state = 549
        case 0x94: state = 550
        case 0x95: state = 551
        case 0x9a: state = 552
        case 0x9f: state = 553
        case 0xaa: state = 554
        default: break loop
        }
      case 413: // main post-match.
        switch byte {
        case 0x80: state = 657
        case 0xa0...0xa2, 0xa4: state = 44
        case 0xa3: state = 658
        case 0xa5: state = 659
        case 0xb1: state = 660
        case 0xb2: state = 654
        case 0xb8: state = 661
        case 0xb9: state = 662
        case 0xba: state = 663
        case 0xbb: state = 664
        default: break loop
        }
      case 414: // main post-match.
        switch byte {
        case 0x80, 0x85: state = 125
        case 0x81, 0x8c...0x9a, 0x9c, 0x9e: state = 44
        case 0x82: state = 523
        case 0x83: state = 524
        case 0x84: state = 177
        case 0x86: state = 525
        case 0x87: state = 526
        case 0x88: state = 527
        case 0x89: state = 528
        case 0x9b: state = 529
        case 0x9d: state = 88
        case 0x9f: state = 530
        case 0xa0: state = 73
        case 0xa1: state = 531
        case 0xa2: state = 532
        case 0xa4: state = 533
        case 0xa5: state = 534
        case 0xa6: state = 535
        case 0xa7: state = 536
        case 0xa9: state = 537
        default: break loop
        }
      case 415: // main post-match.
        switch byte {
        case 0x80...0x9a, 0x9c...0xbf: state = 44
        case 0x9b: state = 666
        default: break loop
        }
      case 416: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9d...0x9f, 0xa1...0xbf: state = 44
        case 0x9c: state = 654
        case 0xa0: state = 655
        default: break loop
        }
      case 417: // main post-match.
        switch byte {
        case 0x80...0xb9, 0xbb...0xbf: state = 44
        case 0xba: state = 677
        default: break loop
        }
      case 418: // main post-match.
        switch byte {
        case 0x80...0xae: state = 44
        case 0xaf: state = 480
        default: break loop
        }
      case 419: // main post-match.
        switch byte {
        case 0xa0...0xa7: state = 44
        case 0xa8: state = 596
        default: break loop
        }
      case 420: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 421: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x93...0x97, 0x9d...0xb6, 0xb8...0xbc, 0xbe: state = 5
        default: break loop
        }
      case 422: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x83, 0x84, 0x86...0xbf: state = 5
        default: break loop
        }
      case 423: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x93...0xbf: state = 5
        default: break loop
        }
      case 424: // main pre-match.
        switch byte {
        case 0x90...0xbf: state = 5
        default: break loop
        }
      case 425: // main pre-match.
        switch byte {
        case 0x80...0x87, 0xb0...0xbd: state = 5
        default: break loop
        }
      case 426: // main pre-match.
        switch byte {
        case 0x80...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 427: // main pre-match.
        switch byte {
        case 0x80...0x92, 0x94...0xa6, 0xa8...0xab, 0xb0...0xb4, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 428: // main pre-match.
        switch byte {
        case 0x80...0xbc: state = 5
        default: break loop
        }
      case 429: // main pre-match.
        switch byte {
        case 0x81...0xbf: state = 5
        default: break loop
        }
      case 430: // main pre-match.
        switch byte {
        case 0x80...0xbe: state = 5
        default: break loop
        }
      case 431: // main pre-match.
        switch byte {
        case 0x82...0x87, 0x8a...0x8f, 0x92...0x97, 0x9a...0x9c, 0xa0...0xa6, 0xa8...0xae, 0xbc, 0xbd: state = 5
        default: break loop
        }
      case 432: // main post-match.
        switch byte {
        case 0x30, 0x31: state = 597; last = pos; kind = .intBin
        default: break loop
        }
      case 433: // main pre-match.
        switch byte {
        case 0x84...0x87: state = 196
        default: break loop
        }
      case 434: // main pre-match.
        switch byte {
        case 0x80...0xab, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 435: // main pre-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xae, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 436: // main pre-match.
        switch byte {
        case 0x81...0x8f, 0x91...0xb5: state = 5
        default: break loop
        }
      case 437: // main pre-match.
        switch byte {
        case 0x80...0xac: state = 5
        default: break loop
        }
      case 438: // main pre-match.
        switch byte {
        case 0xa6...0xbf: state = 5
        default: break loop
        }
      case 439: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbb: state = 5
        default: break loop
        }
      case 440: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90, 0x91, 0xa0...0xa5: state = 5
        default: break loop
        }
      case 441: // main pre-match.
        switch byte {
        case 0x80...0x94, 0xa0...0xac, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 442: // main pre-match.
        switch byte {
        case 0x80...0x98: state = 5
        default: break loop
        }
      case 443: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 444: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xad: state = 5
        default: break loop
        }
      case 445: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbe: state = 5
        default: break loop
        }
      case 446: // main pre-match.
        switch byte {
        case 0x80...0xb0, 0xb3...0xb6, 0xba, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 447: // main pre-match.
        switch byte {
        case 0x80...0xa2, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 448: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbf: state = 5
        default: break loop
        }
      case 449: // main pre-match.
        switch byte {
        case 0xa0...0xad: state = 5
        default: break loop
        }
      case 450: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75...0x7a: state = 39; last = pos; kind = .sym
        case 0x74: state = 539; last = pos; kind = .sym
        default: break loop
        }
      case 451: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87, 0x8d, 0x90...0xbf: state = 5
        default: break loop
        }
      case 452: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0x96, 0x98, 0x9a...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 453: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0x8d, 0x90...0xb0, 0xb2...0xb5, 0xb8...0xbe: state = 5
        default: break loop
        }
      case 454: // main pre-match.
        switch byte {
        case 0x80, 0x82...0x85, 0x88...0x96, 0x98...0xbf: state = 5
        default: break loop
        }
      case 455: // main pre-match.
        switch byte {
        case 0x80...0x90, 0x92...0x95, 0x98...0xbf: state = 5
        default: break loop
        }
      case 456: // main pre-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xbc: state = 5
        default: break loop
        }
      case 457: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbd: state = 5
        default: break loop
        }
      case 458: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x94, 0xa0...0xb6: state = 5
        default: break loop
        }
      case 459: // main pre-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xac, 0xae...0xb0, 0xb2, 0xb3: state = 5
        default: break loop
        }
      case 460: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 461: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x99, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 462: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 463: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xab, 0xb0...0xbb: state = 5
        default: break loop
        }
      case 464: // main pre-match.
        switch byte {
        case 0x80, 0x84...0xad, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 465: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x90...0x9a, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 466: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9e...0xbf: state = 5
        default: break loop
        }
      case 467: // main pre-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xbc, 0xbf: state = 5
        default: break loop
        }
      case 468: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x90...0x99, 0xa0...0xad, 0xb0...0xbe: state = 5
        default: break loop
        }
      case 469: // main pre-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbc: state = 5
        default: break loop
        }
      case 470: // main pre-match.
        switch byte {
        case 0x80...0xb3, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 471: // main pre-match.
        switch byte {
        case 0x80...0xb7, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 472: // main pre-match.
        switch byte {
        case 0x80...0x89, 0x8d...0xbf: state = 5
        default: break loop
        }
      case 473: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x90...0xba, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 474: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xb9: state = 5
        default: break loop
        }
      case 475: // main pre-match.
        switch byte {
        case 0x80...0xb9, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 476: // main pre-match.
        switch byte {
        case 0x80...0x95, 0x98...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 477: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x88...0x8d, 0x90...0x97, 0x99, 0x9b, 0x9d, 0x9f...0xbd: state = 5
        default: break loop
        }
      case 478: // main pre-match.
        switch byte {
        case 0x80...0xb4, 0xb6...0xbf: state = 5
        default: break loop
        }
      case 479: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x93, 0x96...0x9b, 0x9d...0xaf, 0xb2...0xb4, 0xb6...0xbe: state = 5
        default: break loop
        }
      case 480: // main post-match.
        switch byte {
        case 0x80...0xa0: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 481: // intDec.
        switch byte {
        case 0x30...0x39: state = 481; last = pos; kind = .intDec
        case 0x5f: state = 520
        default: break loop
        }
      case 482: // main pre-match.
        switch byte {
        case 0x80...0xad, 0xb0...0xbe: state = 5
        default: break loop
        }
      case 483: // main pre-match.
        switch byte {
        case 0x80...0x9b, 0x9e, 0xa0...0xaa: state = 5
        default: break loop
        }
      case 484: // main pre-match.
        switch byte {
        case 0xa0...0xb4, 0xb6...0xbd: state = 5
        default: break loop
        }
      case 485: // main pre-match.
        switch byte {
        case 0x93...0xa1, 0xa3...0xbf: state = 5
        default: break loop
        }
      case 486: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb6...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 487: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8e, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xbe: state = 5
        default: break loop
        }
      case 488: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8a, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5, 0xb6, 0xb8, 0xb9, 0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 489: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x87, 0x88, 0x8b...0x8d, 0x91, 0x99...0x9c, 0x9e, 0xa6...0xb6: state = 5
        default: break loop
        }
      case 490: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8d, 0x8f...0x91, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 491: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x87...0x89, 0x8b...0x8d, 0x90, 0xa0...0xa3, 0xa6...0xb1, 0xb9...0xbf: state = 5
        default: break loop
        }
      case 492: // main pre-match.
        switch byte {
        case 0x81...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 493: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x96, 0x97, 0x9c, 0x9d, 0x9f...0xa3, 0xa6...0xb7: state = 5
        default: break loop
        }
      case 494: // main pre-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x8a, 0x8e...0x90, 0x92...0x95, 0x99, 0x9a, 0x9c, 0x9e, 0x9f, 0xa3, 0xa4, 0xa8...0xaa, 0xae...0xb9, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 495: // main pre-match.
        switch byte {
        case 0x80...0x82, 0x86...0x88, 0x8a...0x8d, 0x90, 0x97, 0xa6...0xba: state = 5
        default: break loop
        }
      case 496: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb9, 0xbd...0xbf: state = 5
        default: break loop
        }
      case 497: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x98...0x9a, 0xa0...0xa3, 0xa6...0xaf, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 498: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x90, 0x92...0xa8, 0xaa...0xb3, 0xb5...0xb9, 0xbc...0xbf: state = 5
        default: break loop
        }
      case 499: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8d, 0x95, 0x96, 0x9e, 0xa0...0xa3, 0xa6...0xaf, 0xb1, 0xb2: state = 5
        default: break loop
        }
      case 500: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8e...0x90, 0x92...0xbf: state = 5
        default: break loop
        }
      case 501: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86...0x88, 0x8a...0x8f, 0x94...0xa3, 0xa6...0xbf: state = 5
        default: break loop
        }
      case 502: // main pre-match.
        switch byte {
        case 0x82, 0x83, 0x85...0x96, 0x9a...0xb1, 0xb3...0xbb, 0xbd: state = 5
        default: break loop
        }
      case 503: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x8a, 0x8f...0x94, 0x96, 0x98...0x9f, 0xa6...0xaf, 0xb2...0xb4: state = 5
        default: break loop
        }
      case 504: // main pre-match.
        switch byte {
        case 0x81...0xba, 0xbf: state = 5
        default: break loop
        }
      case 505: // main pre-match.
        switch byte {
        case 0x80...0x9b: state = 5
        default: break loop
        }
      case 506: // main pre-match.
        switch byte {
        case 0x81, 0x82, 0x84, 0x87, 0x88, 0x8a, 0x8d, 0x94...0x97, 0x99...0x9f, 0xa1...0xa3, 0xa5, 0xa7, 0xaa, 0xab, 0xad...0xb9, 0xbb...0xbd: state = 5
        default: break loop
        }
      case 507: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x88...0x8d, 0x90...0x99, 0x9c...0x9f: state = 5
        default: break loop
        }
      case 508: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x89...0xac, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 509: // main pre-match.
        switch byte {
        case 0x80...0x97, 0x99...0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 510: // main pre-match.
        switch byte {
        case 0x80...0x8c, 0x8e...0x9a: state = 5
        default: break loop
        }
      case 511: // main pre-match.
        switch byte {
        case 0x80...0xa1, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 512: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa0...0xa9, 0xae, 0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 513: // main post-match.
        switch byte {
        case 0x90...0xad, 0xb0...0xb5: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 514: // main post-match.
        switch byte {
        case 0x80...0x85, 0x90...0x99, 0x9b...0xa1, 0xa3...0xb7, 0xbd...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 515: // main post-match.
        switch byte {
        case 0x80...0x8f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 516: // main post-match.
        switch byte {
        case 0x80...0x9a: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 517: // main post-match.
        switch byte {
        case 0x80...0x84, 0x90...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 518: // main post-match.
        switch byte {
        case 0x8f...0x9f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 519: // main post-match.
        switch byte {
        case 0xa0, 0xa1: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 520: // main post-match.
        switch byte {
        case 0x30...0x39: state = 675; last = pos; kind = .intDec
        default: break loop
        }
      case 521: // int.
        switch byte {
        case 0x30...0x39: state = 521; last = pos; kind = .int
        case 0x5f: state = 91
        default: break loop
        }
      case 522: // main pre-match.
        switch byte {
        case 0x80...0xa0: state = 5
        default: break loop
        }
      case 523: // main post-match.
        switch byte {
        case 0x80...0x93, 0xa0...0xae, 0xb1...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 524: // main post-match.
        switch byte {
        case 0x81...0x8f, 0x91...0xb5: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 525: // main post-match.
        switch byte {
        case 0x80...0xac: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 526: // main post-match.
        switch byte {
        case 0xa6...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 527: // main post-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 528: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90, 0x91, 0xa0...0xa5: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 529: // main post-match.
        switch byte {
        case 0x80...0x94, 0xa0...0xac, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 530: // main post-match.
        switch byte {
        case 0x80...0x98: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 531: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 532: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xad: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 533: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x90...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 534: // main post-match.
        switch byte {
        case 0x80...0xb0, 0xb3...0xb6, 0xba, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 535: // main post-match.
        switch byte {
        case 0x80...0xa2, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 536: // main post-match.
        switch byte {
        case 0x80...0x82, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 537: // main post-match.
        switch byte {
        case 0xa0...0xad: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 538: // pub.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 539: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x61...0x7a: state = 39; last = pos; kind = .sym
        case 0x5f: state = 679; last = pos; kind = .sym
        default: break loop
        }
      case 540: // main post-match.
        switch byte {
        case 0x80...0xae: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 541: // main post-match.
        switch byte {
        case 0x80...0xa6, 0xa9...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 542: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xbb...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 543: // main post-match.
        switch byte {
        case 0x80...0xa8: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 544: // main post-match.
        switch byte {
        case 0x80...0x85: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 545: // main post-match.
        switch byte {
        case 0xa0...0xb3: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 546: // main post-match.
        switch byte {
        case 0x80...0x96, 0xa0...0xb8: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 547: // main post-match.
        switch byte {
        case 0x80...0x94, 0x96...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 548: // main post-match.
        switch byte {
        case 0x80...0x9c, 0x9e, 0x9f, 0xa2, 0xa5, 0xa6, 0xa9...0xac, 0xae...0xb9, 0xbb, 0xbd...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 549: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 550: // main post-match.
        switch byte {
        case 0x80...0x85, 0x87...0x8a, 0x8d...0x94, 0x96...0x9c, 0x9e...0xb9, 0xbb...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 551: // main post-match.
        switch byte {
        case 0x80...0x84, 0x86, 0x8a...0x90, 0x92...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 552: // main post-match.
        switch byte {
        case 0x80...0xa5, 0xa8...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 553: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x8e...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 554: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x9b...0x9f, 0xa1...0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 555: // main post-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 556: // main post-match.
        switch byte {
        case 0x80...0x83: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 557: // main pre-match.
        switch byte {
        case 0x85...0xaf, 0xb1...0xbf: state = 5
        default: break loop
        }
      case 558: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90...0xba: state = 5
        default: break loop
        }
      case 559: // main pre-match.
        switch byte {
        case 0x80...0xae, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 560: // main pre-match.
        switch byte {
        case 0x80...0x83: state = 5
        default: break loop
        }
      case 561: // main post-match.
        switch byte {
        case 0x80...0x8b, 0x8d...0xa6, 0xa8...0xba, 0xbc, 0xbd, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 562: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9d: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 563: // main post-match.
        switch byte {
        case 0x80...0xba: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 564: // main post-match.
        switch byte {
        case 0x80...0x82, 0x87...0xb3, 0xb7...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 565: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90...0x9b, 0xa0: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 566: // main post-match.
        switch byte {
        case 0x90...0xbd: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 567: // main post-match.
        switch byte {
        case 0x80...0x90, 0xa0...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 568: // main post-match.
        switch byte {
        case 0x80...0xa3, 0xad...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 569: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0xba: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 570: // main post-match.
        switch byte {
        case 0x80...0x9d, 0x9f...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 571: // main post-match.
        switch byte {
        case 0x80...0x83, 0x88...0x95: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 572: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xa9, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 573: // main post-match.
        switch byte {
        case 0x80...0x93, 0x98...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 574: // main post-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 575: // main post-match.
        switch byte {
        case 0x80...0xa3, 0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 576: // main post-match.
        switch byte {
        case 0x80...0x95, 0xa0...0xa7: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 577: // main post-match.
        switch byte {
        case 0x80...0x85, 0x88, 0x8a...0xb5, 0xb7, 0xb8, 0xbc, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 578: // main post-match.
        switch byte {
        case 0x80...0x95, 0x97...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 579: // main post-match.
        switch byte {
        case 0x80...0x9e, 0xa7...0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 580: // main post-match.
        switch byte {
        case 0xa0...0xb2, 0xb4, 0xb5, 0xbb...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 581: // main post-match.
        switch byte {
        case 0x80...0x9b, 0x9f...0xb9, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 582: // main post-match.
        switch byte {
        case 0x80...0xb7, 0xbc...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 583: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85, 0x86, 0x8c...0x93, 0x95...0x97, 0x99...0xb5, 0xb8...0xba, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 584: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90...0x98, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 585: // main post-match.
        switch byte {
        case 0x80...0x9f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 586: // main post-match.
        switch byte {
        case 0x80...0xa6, 0xab...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 587: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb9...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 588: // main post-match.
        switch byte {
        case 0x80...0x95, 0x98...0xb2, 0xb8...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 589: // main post-match.
        switch byte {
        case 0x80...0x91, 0x99...0x9c, 0xa9...0xaf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 590: // main post-match.
        switch byte {
        case 0x80...0x88: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 591: // main post-match.
        switch byte {
        case 0x80...0xb2: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 592: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xba...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 593: // main post-match.
        switch byte {
        case 0x80...0xa7, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 594: // main post-match.
        switch byte {
        case 0xa0...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 595: // main pre-match.
        switch byte {
        case 0x80...0x9d: state = 5
        default: break loop
        }
      case 596: // main post-match.
        switch byte {
        case 0x80...0x9d: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 597: // intBin.
        switch byte {
        case 0x30, 0x31: state = 597; last = pos; kind = .intBin
        case 0x5f: state = 432
        default: break loop
        }
      case 598: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x92...0xaf, 0xbf: state = 5
        default: break loop
        }
      case 599: // main pre-match.
        switch byte {
        case 0x80...0xbc, 0xbe, 0xbf: state = 5
        default: break loop
        }
      case 600: // main pre-match.
        switch byte {
        case 0x80, 0x81, 0x90...0xa8, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 601: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x90...0xb6: state = 5
        default: break loop
        }
      case 602: // main pre-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9f, 0xa1...0xb4: state = 5
        default: break loop
        }
      case 603: // main pre-match.
        switch byte {
        case 0x80...0x91, 0x93...0xbe: state = 5
        default: break loop
        }
      case 604: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x8a...0x8d, 0x8f...0x9d, 0x9f...0xa9, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 605: // main pre-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xb9: state = 5
        default: break loop
        }
      case 606: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbb...0xbf: state = 5
        default: break loop
        }
      case 607: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x90, 0x97, 0x9d...0xa3, 0xa6...0xac, 0xb0...0xb4: state = 5
        default: break loop
        }
      case 608: // main pre-match.
        switch byte {
        case 0x80...0x99, 0x9b, 0x9d, 0x9e: state = 5
        default: break loop
        }
      case 609: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99: state = 5
        default: break loop
        }
      case 610: // main pre-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 611: // main pre-match.
        switch byte {
        case 0x80...0x84, 0x90...0x99, 0xa0...0xac: state = 5
        default: break loop
        }
      case 612: // main pre-match.
        switch byte {
        case 0x80...0x89: state = 5
        default: break loop
        }
      case 613: // main pre-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xab, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 614: // main pre-match.
        switch byte {
        case 0xa0...0xbf: state = 5
        default: break loop
        }
      case 615: // main pre-match.
        switch byte {
        case 0x80...0xb2, 0xbf: state = 5
        default: break loop
        }
      case 616: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0xbf: state = 5
        default: break loop
        }
      case 617: // main pre-match.
        switch byte {
        case 0x80...0x83, 0x86...0xa2: state = 5
        default: break loop
        }
      case 618: // main pre-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xb6, 0xb8...0xbf: state = 5
        default: break loop
        }
      case 619: // main pre-match.
        switch byte {
        case 0x80...0x85, 0x90...0xac, 0xb0...0xbf: state = 5
        default: break loop
        }
      case 620: // main pre-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xa7, 0xa9...0xb6: state = 5
        default: break loop
        }
      case 621: // main pre-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x89, 0x8b...0xb6, 0xba, 0xbc, 0xbd, 0xbf: state = 5
        default: break loop
        }
      case 622: // main pre-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xa5, 0xa7, 0xa8, 0xaa...0xbf: state = 5
        default: break loop
        }
      case 623: // main pre-match.
        switch byte {
        case 0x80...0x8e, 0x90, 0x91, 0x93...0x98, 0xa0...0xa9: state = 5
        default: break loop
        }
      case 624: // main pre-match.
        switch byte {
        case 0xa0...0xb8: state = 5
        default: break loop
        }
      case 625: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x65, 0x67...0x7a: state = 39; last = pos; kind = .sym
        case 0x66: state = 678; last = pos; kind = .sym
        default: break loop
        }
      case 626: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x92...0xaf, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 627: // main post-match.
        switch byte {
        case 0x80...0xbc, 0xbe, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 628: // main post-match.
        switch byte {
        case 0x80, 0x81, 0x90...0xa8, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 629: // main post-match.
        switch byte {
        case 0x80...0x86, 0x90...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 630: // main post-match.
        switch byte {
        case 0x80...0x8d, 0x90...0x9f, 0xa1...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 631: // main post-match.
        switch byte {
        case 0x80...0x91, 0x93...0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 632: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x8a...0x8d, 0x8f...0x9d, 0x9f...0xa9, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 633: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xb9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 634: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x8c, 0x8f, 0x90, 0x93...0xa8, 0xaa...0xb0, 0xb2, 0xb3, 0xb5...0xb9, 0xbb...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 635: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87, 0x88, 0x8b...0x8d, 0x90, 0x97, 0x9d...0xa3, 0xa6...0xac, 0xb0...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 636: // main post-match.
        switch byte {
        case 0x80...0x99, 0x9b, 0x9d, 0x9e: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 637: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 638: // main post-match.
        switch byte {
        case 0x80...0xb5, 0xb8...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 639: // main post-match.
        switch byte {
        case 0x80...0x84, 0x90...0x99, 0xa0...0xac: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 640: // main post-match.
        switch byte {
        case 0x80...0x89: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 641: // main post-match.
        switch byte {
        case 0x80...0x9a, 0x9d...0xab, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 642: // main post-match.
        switch byte {
        case 0x80...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 643: // main post-match.
        switch byte {
        case 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 644: // main post-match.
        switch byte {
        case 0x80...0xb2, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 645: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 646: // main post-match.
        switch byte {
        case 0x80...0x83, 0x86...0xa2: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 647: // main post-match.
        switch byte {
        case 0x80...0x88, 0x8a...0xb6, 0xb8...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 648: // main post-match.
        switch byte {
        case 0x80...0x85, 0x90...0xac, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 649: // main post-match.
        switch byte {
        case 0x80...0x8f, 0x92...0xa7, 0xa9...0xb6: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 650: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88, 0x89, 0x8b...0xb6, 0xba, 0xbc, 0xbd, 0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 651: // main post-match.
        switch byte {
        case 0x80...0x87, 0x90...0x99, 0xa0...0xa5, 0xa7, 0xa8, 0xaa...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 652: // main post-match.
        switch byte {
        case 0x80...0x8e, 0x90, 0x91, 0x93...0x98, 0xa0...0xa9: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 653: // main post-match.
        switch byte {
        case 0xa0...0xb8: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 654: // main post-match.
        switch byte {
        case 0x80...0xb4: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 655: // main post-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 656: // intHex.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 656; last = pos; kind = .intHex
        case 0x5f: state = 681
        default: break loop
        }
      case 657: // main post-match.
        switch byte {
        case 0x80...0x86, 0x88...0x98, 0x9b...0xa1, 0xa3, 0xa4, 0xa6...0xaa: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 658: // main post-match.
        switch byte {
        case 0x80...0x84, 0x87...0x96: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 659: // main post-match.
        switch byte {
        case 0x80...0x8a, 0x90...0x99, 0x9e, 0x9f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 660: // main post-match.
        switch byte {
        case 0xb1...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 661: // main post-match.
        switch byte {
        case 0x80...0x83, 0x85...0x9f, 0xa1, 0xa2, 0xa4, 0xa7, 0xa9...0xb2, 0xb4...0xb7, 0xb9, 0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 662: // main post-match.
        switch byte {
        case 0x82, 0x87, 0x89, 0x8b, 0x8d...0x8f, 0x91, 0x92, 0x94, 0x97, 0x99, 0x9b, 0x9d, 0x9f, 0xa1, 0xa2, 0xa4, 0xa7...0xaa, 0xac...0xb2, 0xb4...0xb7, 0xb9...0xbc, 0xbe: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 663: // main post-match.
        switch byte {
        case 0x80...0x89, 0x8b...0x9b, 0xa1...0xa3, 0xa5...0xa9, 0xab...0xbb: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 664: // main post-match.
        switch byte {
        case 0xb0, 0xb1: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 665: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x67, 0x69...0x7a: state = 39; last = pos; kind = .sym
        case 0x68: state = 674; last = pos; kind = .sym
        default: break loop
        }
      case 666: // main post-match.
        switch byte {
        case 0x80...0x96: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 667: // main post-match.
        switch byte {
        case 0x80...0x9e: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 668: // main post-match.
        switch byte {
        case 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 669: // main post-match.
        switch byte {
        case 0x80...0xaa, 0xb0...0xbc: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 670: // main post-match.
        switch byte {
        case 0x80...0x88, 0x90...0x99, 0x9c...0x9f: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 671: // main post-match.
        switch byte {
        case 0x80...0x86: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 672: // main post-match.
        switch byte {
        case 0x30...0x37: state = 676; last = pos; kind = .intOct
        default: break loop
        }
      case 673: // main pre-match.
        switch byte {
        case 0x80...0x9d, 0xa0...0xbf: state = 5
        default: break loop
        }
      case 674: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6e, 0x70...0x7a: state = 39; last = pos; kind = .sym
        case 0x6f: state = 680; last = pos; kind = .sym
        default: break loop
        }
      case 675: // intDec.
        switch byte {
        case 0x30...0x39: state = 675; last = pos; kind = .intDec
        case 0x5f: state = 520
        default: break loop
        }
      case 676: // intOct.
        switch byte {
        case 0x30...0x37: state = 676; last = pos; kind = .intOct
        case 0x5f: state = 672
        default: break loop
        }
      case 677: // main post-match.
        switch byte {
        case 0x80...0xa1, 0xb0...0xbf: state = 42; last = pos; kind = .comment
        default: break loop
        }
      case 678: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6d, 0x6f...0x7a: state = 39; last = pos; kind = .sym
        case 0x6e: state = 682; last = pos; kind = .polyfn
        default: break loop
        }
      case 679: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x73, 0x75, 0x77...0x7a: state = 39; last = pos; kind = .sym
        case 0x74: state = 684; last = pos; kind = .sym
        case 0x76: state = 685; last = pos; kind = .sym
        default: break loop
        }
      case 680: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x63, 0x65...0x7a: state = 39; last = pos; kind = .sym
        case 0x64: state = 683; last = pos; kind = .method
        default: break loop
        }
      case 681: // main post-match.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 686; last = pos; kind = .intHex
        default: break loop
        }
      case 682: // polyfn.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 683: // method.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 684: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x78, 0x7a: state = 39; last = pos; kind = .sym
        case 0x79: state = 688; last = pos; kind = .sym
        default: break loop
        }
      case 685: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x62...0x7a: state = 39; last = pos; kind = .sym
        case 0x61: state = 687; last = pos; kind = .sym
        default: break loop
        }
      case 686: // intHex.
        switch byte {
        case 0x30...0x39, 0x41...0x46, 0x61...0x66: state = 686; last = pos; kind = .intHex
        case 0x5f: state = 681
        default: break loop
        }
      case 687: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6b, 0x6d...0x7a: state = 39; last = pos; kind = .sym
        case 0x6c: state = 689; last = pos; kind = .host_val
        default: break loop
        }
      case 688: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x6f, 0x71...0x7a: state = 39; last = pos; kind = .sym
        case 0x70: state = 690; last = pos; kind = .sym
        default: break loop
        }
      case 689: // host_val.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }
      case 690: // sym.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x64, 0x66...0x7a: state = 39; last = pos; kind = .sym
        case 0x65: state = 691; last = pos; kind = .host_type
        default: break loop
        }
      case 691: // host_type.
        switch byte {
        case 0x30...0x39, 0x41...0x5a, 0x5f, 0x61...0x7a: state = 39; last = pos; kind = .sym
        default: break loop
        }

      default: fatalError("Lexer.next: impossible state: \(state)")
      }
      if byte == 0x0a {
        source.newlinePositions.append(pos)
      }
      pos += 1
    }

    let tokenPos = self.pos
    let tokenEnd:Int
    if (last == -1) {
      tokenEnd = pos
      assert(kind == .incomplete)
    } else {
      tokenEnd = last + 1
    }
    assert(tokenPos < tokenEnd, "tokenPos: \(tokenPos); tokenEnd: \(tokenEnd)")
    self.pos = tokenEnd
    if kind == popKind {
      stack.removeLast()
    } else {
      if let childPair = Lexer.modeTransitions[mode]?[kind] {
        stack.append(childPair)
      }
    }
    return Token(pos: tokenPos, end: tokenEnd, linePos: linePos, lineIdx: lineIdx, kind: kind)
  }

  private static let modeTransitions: Dictionary<LexMode, Dictionary<TokenKind, (LexMode, TokenKind?)>> = [:]
}

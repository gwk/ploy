# Â© 2015 George King. Permission to use this file is granted in ploy/license.txt.

in FS
host_type File;
host_type _Fs;
_fs = host_val _Fs "require('fs')";
write_Bool = host_val (File Bool)%() "function($) { FS___fs.writeSync($._0, $._1); return undefined; }" FS/_fs;
write_Int  = host_val (File Int)%()  "function($) { FS___fs.writeSync($._0, $._1); return undefined; }" FS/_fs;
write_Str  = host_val (File Str)%()  "function($) { FS___fs.writeSync($._0, $._1); return undefined; }" FS/_fs;
;

in HOST
host_type _Process;
_process = host_val _Process "process";
;

in ROOT
true  = host_val Bool "true";
false = host_val Bool "false";

not = host_val Bool%Bool "function($) { return !$; }";

dec_Int = host_val Int%Int "function($) { return $ - 1; }";
inc_Int = host_val Int%Int "function($) { return $ + 1; }";

add_Int = host_val (Int Int)%Int "function($) { return $._0 + $._1; }";
sub_Int = host_val (Int Int)%Int "function($) { return $._0 - $._1; }";
mul_Int = host_val (Int Int)%Int "function($) { return $._0 * $._1; }";
div_Int = host_val (Int Int)%Int "function($) { return $._0 / $._1; }";
mod_Int = host_val (Int Int)%Int "function($) { return (($._0 % $._1) + $._1) % $._1; }";
rem_Int = host_val (Int Int)%Int "function($) { return $._0 % $._1; }";

eq_Int = host_val (Int Int)%Bool "function($) { return $._0 == $._1; }";
ne_Int = host_val (Int Int)%Bool "function($) { return $._0 != $._1; }";
ge_Int = host_val (Int Int)%Bool "function($) { return $._0 >= $._1; }";
gt_Int = host_val (Int Int)%Bool "function($) { return $._0 >  $._1; }";
le_Int = host_val (Int Int)%Bool "function($) { return $._0 <= $._1; }";
lt_Int = host_val (Int Int)%Bool "function($) { return $._0 <  $._1; }";

exit = host_val Int%() "function($) { HOST___process.exit($); }" HOST/_process;
std_out = host_val FS/File "HOST___process.stdout.fd" HOST/_process;
std_err = host_val FS/File "HOST___process.stderr.fd" HOST/_process;
;

in PROC
# TODO: these are probably the wrong type;
# need to repackage into proper ploy types or hide behind accessor functions.
#PROC__cmd  = host_val Xyz HOST___process.argv
#PROC__args = host_val Xyz HOST___process.argv.slice(1)
;

# Â© 2015 George King. Permission to use this file is granted in ploy/license.txt.

in FS
host_type File;
write_Bool = host_val <File Bool>-><> "function($) { HOST__fs.writeSync($._0, $._1); return undefined; }";
write_Int  = host_val <File Int>-><>  "function($) { HOST__fs.writeSync($._0, $._1); return undefined; }";
write_Str  = host_val <File Str>-><>  "function($) { HOST__fs.writeSync($._0, $._1); return undefined; }";
;

in ROOT
true  = host_val Bool "true";
false = host_val Bool "false";

dec_Int = host_val Int->Int "function($) { return $ - 1; }";
inc_Int = host_val Int->Int "function($) { return $ + 1; }";

add_Int = host_val <Int Int>->Int "function($) { return $._0 + $._1; }";
sub_Int = host_val <Int Int>->Int "function($) { return $._0 - $._1; }";
mul_Int = host_val <Int Int>->Int "function($) { return $._0 * $._1; }";
div_Int = host_val <Int Int>->Int "function($) { return $._0 / $._1; }";
mod_Int = host_val <Int Int>->Int "function($) { return (($._0 % $._1) + $._1) % $._1; }";
rem_Int = host_val <Int Int>->Int "function($) { return $._0 % $._1; }";

eq_Int = host_val <Int Int>->Bool "function($) { return $._0 == $._1; }";
ne_Int = host_val <Int Int>->Bool "function($) { return $._0 != $._1; }";
ge_Int = host_val <Int Int>->Bool "function($) { return $._0 >= $._1; }";
gt_Int = host_val <Int Int>->Bool "function($) { return $._0 >  $._1; }";
le_Int = host_val <Int Int>->Bool "function($) { return $._0 <= $._1; }";
lt_Int = host_val <Int Int>->Bool "function($) { return $._0 <  $._1; }";

exit = host_val Int-><> "function($) { HOST__process.exit($); }";
std_out = host_val FS/File "HOST__process.stdout.fd";
std_err = host_val FS/File "HOST__process.stderr.fd";
;

in PROC
# TODO: these are probably the wrong type;
# need to repackage into proper ploy types or hide behind accessor functions.
#PROC__cmd  = host_val Xyz HOST__process.argv
#PROC__args = host_val Xyz HOST__process.argv.slice(1)
;

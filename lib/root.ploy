# Â© 2015 George King. Permission to use this file is granted in ploy/license.txt.

in ROOT

true  = host_val Bool "true";
false = host_val Bool "false";

not = host_val Bool%Bool "function($) { return !$; }";

dec_Int = host_val Int%Int "function($) { return $ - 1; }";
inc_Int = host_val Int%Int "function($) { return $ + 1; }";

add_Int = host_val (Int Int)%Int "function($) { return $._0 + $._1; }";
sub_Int = host_val (Int Int)%Int "function($) { return $._0 - $._1; }";
mul_Int = host_val (Int Int)%Int "function($) { return $._0 * $._1; }";
div_Int = host_val (Int Int)%Int "function($) { return $._0 / $._1; }";
mod_Int = host_val (Int Int)%Int "function($) { return (($._0 % $._1) + $._1) % $._1; }";
rem_Int = host_val (Int Int)%Int "function($) { return $._0 % $._1; }";

eq_Int = host_val (Int Int)%Bool "function($) { return $._0 == $._1; }";
ne_Int = host_val (Int Int)%Bool "function($) { return $._0 != $._1; }";
ge_Int = host_val (Int Int)%Bool "function($) { return $._0 >= $._1; }";
gt_Int = host_val (Int Int)%Bool "function($) { return $._0 >  $._1; }";
le_Int = host_val (Int Int)%Bool "function($) { return $._0 <= $._1; }";
lt_Int = host_val (Int Int)%Bool "function($) { return $._0 <  $._1; }";

exit = host_val Int%() "function($) { HOST___process.exit($); }" HOST/_process;
std_out = host_val FS/File "HOST___process.stdout.fd" HOST/_process;
std_err = host_val FS/File "HOST___process.stderr.fd" HOST/_process;


err = fn Str%() FS/write_Str(std_err $);
out = fn Str%() FS/write_Str(std_out $);

errL = fn Str%()
  err.$
  err.'\n';

outL = fn Str%()
  out.$
  out.'\n';

err_Int = fn Int%() FS/write_Int(std_err $);
out_Int = fn Int%() FS/write_Int(std_out $);

errL_Int = fn Int%()
  FS/write_Int(std_err $)
  FS/write_Str(std_err '\n');

outL_Int = fn Int%()
  FS/write_Int(std_out $)
  FS/write_Str(std_out '\n');



assert = fn (Bool Str)%()
  if not.0@$ ? {
    err.'assert failed: '
    errL(1@$)
    exit.1 };;

assert_eq = fn (Int Int Str)%()
  if ne_Int(0@$ 1@$) ? {
    err.'assert_eq failed: '
    err_Int.0@$
    err.' != '
    err_Int.1@$
    err.'; '
    errL(2@$)
    exit.1 };;



extensible add; # TODO: type constraints.

add += fn (Int Int)%Int add_Int.$;

;

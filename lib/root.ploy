// Â© 2015 George King. Permission to use this file is granted in ploy/license.txt.

in ROOT

nil = ()
Null =: ()

true  = host_val Bool "true";
false = host_val Bool "false";

void = fn (T::Every)%Void;
//void = fn Every%Void; // TODO.

not = fn Bool%Bool host_val Bool "!$";;

polyfn dec (T::Every)%T; // TODO: make generic.
method dec Int%Int host_val Int "$ - 1";;
//polyfn dec (T::Subtractable)%T sub($ 1); // TODO.

polyfn inc (T::Every)%T; // TODO: make generic.
method inc Int%Int host_val Int "$ + 1";;
//polyfn inc (T::Addable)%T add($ 1); // TODO.

polyfn add (T::Every T)%T;
Addable =: T@add

method add (Int Int)%Int host_val Int "$._0 + $._1";;

polyfn sub (T::Every T)%T;
Subtractable =: T@sub

method sub (Int Int)%Int host_val Int "$._0 - $._1";;

polyfn mul (T::Every T)%T;
//Multipliable =: T@mul

method mul (Int Int)%Int host_val Int "$._0 * $._1";;

polyfn div (T::Every T)%T;
//Dividable =: T@div

method div (Int Int)%Int host_val Int "$._0 / $._1";;

polyfn mod (T::Every T)%T;
//Moduloable =: T@mod

method mod (Int Int)%Int host_val Int "(($._0 % $._1) + $._1) % $._1";;

polyfn rem (T::Every T)%T;
//Remainderable =: T@rem

method rem (Int Int)%Int host_val Int "$._0 % $._1";;

//Arithmetic =: Addable & Subtractable & Multipliable & Dividable & Moduloable & Remainderable // TODO.


polyfn eq (T::Every T)%Bool;
method eq (() ())%Bool true;
method eq (Int Int)%Bool host_val Bool "$._0 == $._1";;
method eq (Str Str)%Bool host_val Bool "$._0 == $._1";;

polyfn ne (T::Every T)%Bool;
method ne (() ())%Bool false;
method ne (Int Int)%Bool host_val Bool "$._0 != $._1";;

polyfn ge (T::Every T)%Bool;
method ge (() ())%Bool true;
method ge (Int Int)%Bool host_val Bool "$._0 >= $._1";;

polyfn gt (T::Every T)%Bool;
method gt (() ())%Bool false;
method gt (Int Int)%Bool host_val Bool "$._0 >  $._1";;

polyfn le (T::Every T)%Bool;
method le (() ())%Bool true;
method le (Int Int)%Bool host_val Bool "$._0 <= $._1";;

polyfn lt (T::Every T)%Bool;
method lt (() ())%Bool false;
method lt (Int Int)%Bool host_val Bool "$._0 <  $._1";;


std_out = host_val FS/File "$g.process.stdout.fd";
std_err = host_val FS/File "$g.process.stderr.fd";


polyfn err (T::Every)%Void; // TODO: make generic.
method err ()%Void FS/write(std_err "()");
method err Str%Void FS/write(std_err $);
method err Int%Void FS/write(std_err $);

polyfn out (T::Every)%Void; // TODO: make generic.
method out ()%Void FS/write(std_out "()");
method out Str%Void FS/write(std_out $);
method out Int%Void FS/write(std_out $);


polyfn errL (T::Every)%Void; // TODO: make generic.
method errL Int%Void err.$ err.'\n';
method errL Str%Void err.$ err.'\n';


polyfn outL (T::Every)%Void; // TODO: make generic.
method outL Int%Void out.$ out.'\n';
method outL Str%Void out.$ out.'\n';


exit = fn Int%Never host_val Never HOST/_process "HOST___process.exit($)";;

fail = fn Str%Never
  errL.$
  exit.1;

abort = host_val Str%Never "function($) { throw new Error($); }";

assert = fn Bool%Void
  if not.$ ? abort.'assert failed.';;

;

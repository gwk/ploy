writeup v0
© 2015 George King. Permission to use this file is granted in ploy/license.txt.


# Ploy syntax glossary

## Comments

`#`: line comment: the source text from the comment symbol until the end of the line is considered part of the trailing whitespace of the expression.


## Nesting syntax

`(…)`: parantheses have several distinct but related meanings:
- "Group": surrounding a single expression, they simply clarify the associativity of infix operators within a complex phrase, e.g. `(a.b).c` vs `a.b.c`.
- "Compound Literal": surrounding multiple space-separated expressions, they aggregate contents into a compound (tuple) value, e.g. `(a b)`.
- "Implied Call": when a parenthesized expression immediately follows another expression without spaces, it implies a function call, e.g. `f(a b)`.

`[…]`: "Expand": expand a macro, analagous to f(a b). Unlike function calls, macro calls have a single syntax for both single and multiple arguments.
| m[a]
| m[a b]

`<…>`: Angle brackets are analagous to parantheses, but for type expressions:
- "Compound Type": surrounding multiple space-separated type expressions, they define a compound type , e.g. '<A B>'.
- "Implied Reify": reify an abstract type with multiple type arguments, analagous to `f(a b)`, e.g. `T<A B>`.

`{…}`: "Do": sequence multiple statements and/or variable bindings. The value of the Do block is the value of the final expression inside the block:
| { a = 1
|   b = (inc a)
|   (add a b)}

`'…'`: single-quoted string literal.

`"…"`: double-quoted string literal.


## Prefix operators

`-`: negation sign.
`\``: quote: syntax quoting for macro programming.
`~`: quasiquote: syntax quasiquoting for macro programming.
`,`: unquote: syntax unquoting for macro programming.
`&`: variad: variadic parameter prefix.
`$`: unused (pass-by-value?); see also the infix operator below.


## Infix operators

Infix operators have fixed precedence groups; operators in later groups bind expressions together more tightly than earlier groups. Within a group, all operators are right-associative. This means that for any chain of same-precedence operators, the expressions group from the right, and the leftmost operator becomes the root of the resulting syntactic tree. We can visualize the groupings as successive underlines, with the carrot pointing to the responsible operator:
  a=b.c
    ~^~
  ~^~~~
  ~~~~~  

The operator groups are as follows:
- "=", "?".
- ":".
- all other explicit operators.
- implicit operators.

The expressions `f(a b)`, `T<A B>`, and `m[a b]` all denote implicit 'adjacency operators' equivalent to `f.(a b)`, `T^<a b>`, `m|[a b]`; the adjacency operators have higher precedence than the regular ones, so `g(a).b` is equivalent to `(g.a).b`, not `g.a.b`.


`:`: "Annotate": annotate an expression (left side) with a type (right side).
| x:Int

`=`: "Bind": Associate a name/symbol (left side) with the value of an expression (right side). Bind has the lowest operator precedence, meaning that in a chain of operators, a binding acts as the root of the resulting expression tree. We often use spaces around the `=` sign to visually hint at the low precedence, but it is not required.
| x:Int = inc.1

`.`: "Call": call a function with an argument:
| f.arg

`^`: "Reify": reify a type with a single argument.
| T^A

`@`: field accessor.
| field-name@struct-value

`%`: function signature.
| Int%Int


## Other

`/`: path separator; this is not an infix operator, but instead parsed as part of the syntax for symbols.
| LIB/SUB/public-value

`;`: keyword sentence terminator.

`!`: unused.
`+`: unused.
`\`: unused.
`*`: unused.

`_`: unused; since many host languages use '_' instead of '-' as a legal character for identifiers, Ploy reserves '_' so that Ploy symbols can be easily translated to host language identifiers.
